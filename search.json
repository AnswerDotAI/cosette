[
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "CHANGELOG.html#section",
    "href": "CHANGELOG.html#section",
    "title": "",
    "section": "0.2.3",
    "text": "0.2.3\n\nNew Features\n\nSupport GPT 5 (#29)"
  },
  {
    "objectID": "CHANGELOG.html#section-1",
    "href": "CHANGELOG.html#section-1",
    "title": "",
    "section": "0.2.2",
    "text": "0.2.2\n\nBugs Squashed\n\nopenai broke their api (#28)"
  },
  {
    "objectID": "CHANGELOG.html#section-2",
    "href": "CHANGELOG.html#section-2",
    "title": "",
    "section": "0.2.1",
    "text": "0.2.1\n\nNew Features\n\nSupport latest 1.99.2 sdk (#27)"
  },
  {
    "objectID": "CHANGELOG.html#section-3",
    "href": "CHANGELOG.html#section-3",
    "title": "",
    "section": "0.2.0",
    "text": "0.2.0\n\nBreaking Changes\n\nRemove obj support (#26)"
  },
  {
    "objectID": "CHANGELOG.html#section-4",
    "href": "CHANGELOG.html#section-4",
    "title": "",
    "section": "0.1.3",
    "text": "0.1.3\n\nBugs Squashed\n\nfastcore dep update needed (#25)"
  },
  {
    "objectID": "CHANGELOG.html#section-5",
    "href": "CHANGELOG.html#section-5",
    "title": "",
    "section": "0.1.2",
    "text": "0.1.2\n\nBreaking Changes\n\nSwitch to responses api\n\n\n\nNew Features\n\nAdd loop_outputs (#24)\nSupport instructions param (#23)\nSwitch to responses api (#22)"
  },
  {
    "objectID": "CHANGELOG.html#section-6",
    "href": "CHANGELOG.html#section-6",
    "title": "",
    "section": "0.0.6",
    "text": "0.0.6\n\nNew Features\n\nadd history and namespace support to OpenAI Chat class (#20), thanks to @austinvhuang\nport toolloop and other updates from claudette and add new models (#19), thanks to @austinvhuang\nenable o1 streaming (#16), thanks to @KeremTurgutlu\nAdd llms.txt (#15), thanks to @Isaac-Flath\no1, o3-mini support (#14), thanks to @austinvhuang\nadd structured outputs (#9), thanks to @ssslakter\nadd msglm (#7), thanks to @comhar\nAdded support for o-1 models and Azure endpoint. (#5), thanks to @fladhak"
  },
  {
    "objectID": "CHANGELOG.html#section-7",
    "href": "CHANGELOG.html#section-7",
    "title": "",
    "section": "0.0.4",
    "text": "0.0.4\n\nBugs Squashed\n\nexport mk_msg and mk_msgs (#10), thanks to @comhar"
  },
  {
    "objectID": "CHANGELOG.html#section-8",
    "href": "CHANGELOG.html#section-8",
    "title": "",
    "section": "0.0.3",
    "text": "0.0.3\n\nNew Features\n\nFix description"
  },
  {
    "objectID": "CHANGELOG.html#section-9",
    "href": "CHANGELOG.html#section-9",
    "title": "",
    "section": "0.0.2",
    "text": "0.0.2\n\nInitial release"
  },
  {
    "objectID": "toolloop.html",
    "href": "toolloop.html",
    "title": "Tool loop",
    "section": "",
    "text": "from IPython.display import display, Markdown, clear_output\nfrom pprint import pprint\n' '.join(models)\n\n'gpt-5 gpt-5-mini gpt-5-nano o1-preview o1-mini gpt-4o gpt-4o-mini gpt-4-turbo gpt-4 gpt-4-32k gpt-3.5-turbo gpt-3.5-turbo-instruct o1 o3-mini chatgpt-4o-latest o1-pro o3 o4-mini gpt-4.1 gpt-4.1-mini gpt-4.1-nano'\nmodel = models[1]\nmodel\n\n'gpt-5-mini'",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#sample-data",
    "href": "toolloop.html#sample-data",
    "title": "Tool loop",
    "section": "Sample Data",
    "text": "Sample Data\n\ndef _get_orders_customers():\n    orders = {\n        \"O1\": dict(id=\"O1\", product=\"Widget A\", quantity=2, price=19.99, status=\"Shipped\"),\n        \"O2\": dict(id=\"O2\", product=\"Gadget B\", quantity=1, price=49.99, status=\"Processing\"),\n        \"O3\": dict(id=\"O3\", product=\"Gadget B\", quantity=2, price=49.99, status=\"Shipped\")}\n\n    customers = {\n        \"C1\": dict(name=\"John Doe\", email=\"john@example.com\", phone=\"123-456-7890\",\n                   orders=[orders['O1'], orders['O2']]),\n        \"C2\": dict(name=\"Jane Smith\", email=\"jane@example.com\", phone=\"987-654-3210\",\n                   orders=[orders['O3']])\n    }\n    return orders, customers\n\n\norders, customers = _get_orders_customers()\n\n\ndef get_customer_info(\n    customer_id:str # ID of the customer\n): # Customer's name, email, phone number, and list of orders\n    \"Retrieves a customer's information and their orders based on the customer ID\"\n    print(f'- Retrieving customer {customer_id}')\n    return customers.get(customer_id, \"Customer not found\")\n\ndef get_order_details(\n    order_id:str # ID of the order\n): # Order's ID, product name, quantity, price, and order status\n    \"Retrieves the details of a specific order based on the order ID\"\n    print(f'- Retrieving order {order_id}')\n    return orders.get(order_id, \"Order not found\")\n\ndef cancel_order(\n    order_id:str # ID of the order to cancel\n)-&gt;bool: # True if the cancellation is successful\n    \"Cancels an order based on the provided order ID\"\n    print(f'- Cancelling order {order_id}')\n    if order_id not in orders: return False\n    orders[order_id]['status'] = 'Cancelled'\n    return True\n\n\nchatkw = dict(\n    text={ \"verbosity\": \"low\" },\n    reasoning={ \"effort\": \"minimal\" }\n)\n\n\ntools = [get_customer_info, get_order_details, cancel_order]\nchat = Chat(model, tools=tools, **chatkw)\n\n\nr = chat('Hi.')\nr\n\nHello! How can I help you today?\n\n\nid: resp_6897e0de4c348190bf1946e354518b8b0c0dd261ca702a77\ncreated_at: 1754783966.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897e0def4188190ac0593dbdac886be0c0dd261ca702a77’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897e0df0d088190954040dcc2c7f18c0c0dd261ca702a77’, content=[ResponseOutputText(annotations=[], text=‘Hello! How can I help you today?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘get_customer_info’, parameters={‘type’: ‘object’, ‘properties’: {‘customer_id’: {‘type’: ‘string’, ‘description’: ‘ID of the customer’}}, ‘required’: [‘customer_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=“Retrieves a customer’s information and their orders based on the customer ID”), FunctionTool(name=‘get_order_details’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Retrieves the details of a specific order based on the order ID’), FunctionTool(name=‘cancel_order’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order to cancel’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Cancels an order based on the provided order ID:- type: boolean’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=136, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=15, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=151)\nuser: None\nstore: True\n\n\n\n\n\nr = chat('Can you tell me the email address for customer C2?')\nr.output\n\n- Retrieving customer C2\n\n\n[ResponseReasoningItem(id='rs_6897e0f0949c8190af24da7373614a300c0dd261ca702a77', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"customer_id\":\"C2\"}', call_id='call_7qPUHLapCRWKcPqdoFkRYChc', name='get_customer_info', type='function_call', id='fc_6897e0f0c5248190b17036339c4be62a0c0dd261ca702a77', status='completed')]\n\n\n\nr = chat()\nr.output\n\n[ResponseOutputMessage(id='msg_6897e0f5a8b48190b648cb12f43898240c0dd261ca702a77', content=[ResponseOutputText(annotations=[], text='The email for customer C2 is jane@example.com.', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')]\n\n\n\nchat = Chat(model, tools=tools)\nr = chat('Please cancel all orders for customer C1 for me.')\nr.output\n\n- Retrieving customer C1\n\n\n[ResponseReasoningItem(id='rs_6897e0f99ddc8191b8f2fafa74dc06d40913d9b020597909', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"customer_id\":\"C1\"}', call_id='call_LwrqtbAyvJshnZo2a6MIG8GK', name='get_customer_info', type='function_call', id='fc_6897e0fb1f648191b15ad2d73156e6260913d9b020597909', status='completed')]\n\n\n\nr = chat()\nr.output\n\n- Cancelling order O1\n- Cancelling order O2\n\n\n[ResponseReasoningItem(id='rs_6897e0fd41e0819189fc599d98d476280913d9b020597909', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"order_id\":\"O1\"}', call_id='call_q8Xfu230VPo7EtebReDFkXQW', name='cancel_order', type='function_call', id='fc_6897e0fec5fc8191989ee1c6f5456bf90913d9b020597909', status='completed'),\n ResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_eyVUvcqHfbLPdRluohRibIC1', name='cancel_order', type='function_call', id='fc_6897e0fee2c48191be1350e29034816a0913d9b020597909', status='completed')]",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "toolloop.html#toolloop-implementation",
    "href": "toolloop.html#toolloop-implementation",
    "title": "Tool loop",
    "section": "toolloop implementation",
    "text": "toolloop implementation\n\nsource\n\nChat.toolloop\n\n Chat.toolloop (pr, max_steps=10, cont_func:&lt;built-\n                infunctioncallable&gt;=&lt;function noop&gt;, final_prompt='You\n                have no more tool uses. Please summarize your findings. If\n                you did not complete your goal please tell the user what\n                further work needs to be done so they can choose how best\n                to proceed.', stream:bool=False, tools=None,\n                tool_choice=None,\n                background:Optional[bool]|NotGiven=NOT_GIVEN, include:Opti\n                onal[List[ResponseIncludable]]|NotGiven=NOT_GIVEN,\n                input:Union[str,ResponseInputParam]|NotGiven=NOT_GIVEN,\n                instructions:Optional[str]|NotGiven=NOT_GIVEN,\n                max_output_tokens:Optional[int]|NotGiven=NOT_GIVEN,\n                max_tool_calls:Optional[int]|NotGiven=NOT_GIVEN,\n                metadata:Optional[Metadata]|NotGiven=NOT_GIVEN,\n                model:ResponsesModel|NotGiven=NOT_GIVEN,\n                parallel_tool_calls:Optional[bool]|NotGiven=NOT_GIVEN,\n                previous_response_id:Optional[str]|NotGiven=NOT_GIVEN,\n                prompt:Optional[ResponsePromptParam]|NotGiven=NOT_GIVEN,\n                prompt_cache_key:str|NotGiven=NOT_GIVEN,\n                reasoning:Optional[Reasoning]|NotGiven=NOT_GIVEN,\n                safety_identifier:str|NotGiven=NOT_GIVEN, service_tier:\"Op\n                tional[Literal['auto','default','flex','scale','priority']\n                ]|NotGiven\"=NOT_GIVEN,\n                store:Optional[bool]|NotGiven=NOT_GIVEN, stream_options:Op\n                tional[response_create_params.StreamOptions]|NotGiven=NOT_\n                GIVEN, temperature:Optional[float]|NotGiven=NOT_GIVEN,\n                text:ResponseTextConfigParam|NotGiven=NOT_GIVEN,\n                top_logprobs:Optional[int]|NotGiven=NOT_GIVEN,\n                top_p:Optional[float]|NotGiven=NOT_GIVEN, truncation:\"Opti\n                onal[Literal['auto','disabled']]|NotGiven\"=NOT_GIVEN,\n                user:str|NotGiven=NOT_GIVEN,\n                extra_headers:Headers|None=None,\n                extra_query:Query|None=None, extra_body:Body|None=None,\n                timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nAdd prompt pr to dialog and get a response from Claude, automatically following up with tool_use messages\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\n\n\nPrompt to pass to Claude\n\n\nmax_steps\nint\n10\nMaximum number of tool requests to loop through\n\n\ncont_func\ncallable\nnoop\nFunction that stops loop if returns False\n\n\nfinal_prompt\nstr\nYou have no more tool uses. Please summarize your findings. If you did not complete your goal please tell the user what further work needs to be done so they can choose how best to proceed.\nPrompt to add if last message is a tool call\n\n\nstream\nbool\nFalse\nStream response?\n\n\ntools\nNoneType\nNone\nTools to use\n\n\ntool_choice\nNoneType\nNone\nRequired tools to use\n\n\nbackground\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\ninclude\nOptional[List[ResponseIncludable]] | NotGiven\nNOT_GIVEN\n\n\n\ninput\nUnion[str, ResponseInputParam] | NotGiven\nNOT_GIVEN\n\n\n\ninstructions\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nmax_output_tokens\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmax_tool_calls\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmetadata\nOptional[Metadata] | NotGiven\nNOT_GIVEN\n\n\n\nmodel\nResponsesModel | NotGiven\nNOT_GIVEN\n\n\n\nparallel_tool_calls\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nprevious_response_id\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nprompt\nOptional[ResponsePromptParam] | NotGiven\nNOT_GIVEN\n\n\n\nprompt_cache_key\nstr | NotGiven\nNOT_GIVEN\n\n\n\nreasoning\nOptional[Reasoning] | NotGiven\nNOT_GIVEN\n\n\n\nsafety_identifier\nstr | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nOptional[Literal[‘auto’, ‘default’, ‘flex’, ‘scale’, ‘priority’]] | NotGiven\nNOT_GIVEN\n\n\n\nstore\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nstream_options\nOptional[response_create_params.StreamOptions] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntext\nResponseTextConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_logprobs\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntruncation\nOptional[Literal[‘auto’, ‘disabled’]] | NotGiven\nNOT_GIVEN\n\n\n\nuser\nstr | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n_final_prompt = \"You have no more tool uses. Please summarize your findings. If you did not complete your goal please tell the user what further work needs to be done so they can choose how best to proceed.\"\n\n\n\n\nExported source\n@patch\n@delegates(Chat.__call__)\ndef toolloop(self:Chat,\n             pr, # Prompt to pass to Claude\n             max_steps=10, # Maximum number of tool requests to loop through\n             cont_func:callable=noop, # Function that stops loop if returns False\n             final_prompt=_final_prompt, # Prompt to add if last message is a tool call\n             **kwargs):\n    \"Add prompt `pr` to dialog and get a response from Claude, automatically following up with `tool_use` messages\"\n    @save_iter\n    def _f(o):\n        init_n = len(self.h)\n        r = self(pr, **kwargs)\n        yield r\n        if len(self.last)&gt;1: yield from self.last[1:]\n        for i in range(max_steps-1):\n            x = self.h[-1]\n            if not (isinstance(x, dict) and x['type']=='function_call_output'): break\n            r = self(final_prompt if i==max_steps-2 else None, **kwargs)\n            yield r\n            if len(self.last)&gt;1: yield from self.last[1:]\n            if not cont_func(*self.h[-3:]): break\n        o.value = self.h[init_n+1:]\n    return _f()\n\n\n\n\nTest Customer Dataset\n\ndef show(x):\n    if getattr(x, 'output_text', None): r = x\n    else: r = getattr(x,'output',x)\n    display(r)\n\n\nchat = Chat(model, tools=tools)\npr = 'Can you tell me the email address for customer C1?'\nr = chat.toolloop(pr)\nres = list(r)\nfor o in r: show(o)\n\n- Retrieving customer C1\n\n\nThe email for customer C1 is john@example.com. Need anything else about this customer?\n\n\nid: resp_6897e128b4448193bf249ab92f1de8780e7bd7a6ca08f04c\ncreated_at: 1754784041.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897e12998dc8193b861f1ead58b702e0e7bd7a6ca08f04c’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897e12a73f4819387e6321b9d3acbd90e7bd7a6ca08f04c’, content=[ResponseOutputText(annotations=[], text=‘The email for customer C1 is john@example.com. Need anything else about this customer?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘get_customer_info’, parameters={‘type’: ‘object’, ‘properties’: {‘customer_id’: {‘type’: ‘string’, ‘description’: ‘ID of the customer’}}, ‘required’: [‘customer_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=“Retrieves a customer’s information and their orders based on the customer ID”), FunctionTool(name=‘get_order_details’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Retrieves the details of a specific order based on the order ID’), FunctionTool(name=‘cancel_order’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order to cancel’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Cancels an order based on the provided order ID:- type: boolean’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=327, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=24, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=351)\nuser: None\nstore: True\n\n\n\n\nResponseOutputMessage(id='msg_6897e12a73f4819387e6321b9d3acbd90e7bd7a6ca08f04c', content=[ResponseOutputText(annotations=[], text='The email for customer C1 is john@example.com. Need anything else about this customer?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')\n\n\n\nsource\n\n\nloop_outputs\n\n loop_outputs (res)\n\n\n\nExported source\ndef loop_outputs(res):\n    return [dict(p) for o in res for p in ([o] if isinstance(o,dict) else getattr(o,'output',[]))]\n\n\n\ncl = loop_outputs(res)\ncl\n\n[{'id': 'rs_6897e1248f908193a6cf91c7b9d24f180e7bd7a6ca08f04c',\n  'summary': [],\n  'type': 'reasoning',\n  'content': None,\n  'encrypted_content': None,\n  'status': None},\n {'arguments': '{\"customer_id\":\"C1\"}',\n  'call_id': 'call_iSsBtRfj1j7BrbBfilN81sWt',\n  'name': 'get_customer_info',\n  'type': 'function_call',\n  'id': 'fc_6897e12505408193898876b3915318c40e7bd7a6ca08f04c',\n  'status': 'completed'},\n {'type': 'function_call_output',\n  'call_id': 'call_iSsBtRfj1j7BrbBfilN81sWt',\n  'output': \"{'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'orders': [{'id': 'O1', 'product': 'Widget A', 'quantity': 2, 'price': 19.99, 'status': 'Cancelled'}, {'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Cancelled'}]}\"},\n {'id': 'rs_6897e1268cb48193aeec6139bf6891d20e7bd7a6ca08f04c',\n  'summary': [],\n  'type': 'reasoning',\n  'content': None,\n  'encrypted_content': None,\n  'status': None},\n {'id': 'msg_6897e1275b4c8193b2b2e8505b757b470e7bd7a6ca08f04c',\n  'content': [ResponseOutputText(annotations=[], text='The email address for customer C1 is john@example.com. Would you like any other details (phone number, orders, etc.)?', type='output_text', logprobs=[])],\n  'role': 'assistant',\n  'status': 'completed',\n  'type': 'message'}]\n\n\n\ndef disp_tc(x):\n    if x['type']=='function_call': return f\"- `{x['name']}({x['arguments']})`\\n\"\n    elif x['type']=='function_call_output': return f\"  - `{x['output']}`\\n\\n\"\n    else: return ''.join(o.text for o in x['content'])\n\n\n# Markdown(''.join(map(disp_tc, cl)))\n\n\npprint(r.value)\n\n[ResponseReasoningItem(id='rs_6897e12998dc8193b861f1ead58b702e0e7bd7a6ca08f04c', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseOutputMessage(id='msg_6897e12a73f4819387e6321b9d3acbd90e7bd7a6ca08f04c', content=[ResponseOutputText(annotations=[], text='The email for customer C1 is john@example.com. Need anything else about this customer?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')]\n\n\n\norders, customers = _get_orders_customers()\n\n\nchat = Chat(model, tools=tools)\nr = chat.toolloop('What is the status of order O2?')\nfor o in r: display(getattr(o,'output',o))\n\n- Retrieving order O2\n\n\n[ResponseReasoningItem(id='rs_6897e152296c81938b18183a7b3a3f2b070371bcef68a1b8', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_nO3ZOyxkiOtKQTY6UMwDsp9d', name='get_order_details', type='function_call', id='fc_6897e152a24881938ecb7209c4408013070371bcef68a1b8', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_nO3ZOyxkiOtKQTY6UMwDsp9d', name='get_order_details', type='function_call', id='fc_6897e152a24881938ecb7209c4408013070371bcef68a1b8', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_nO3ZOyxkiOtKQTY6UMwDsp9d',\n 'output': \"{'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Processing'}\"}\n\n\n[ResponseOutputMessage(id='msg_6897e155231c8193946aeae2f3c7bf85070371bcef68a1b8', content=[ResponseOutputText(annotations=[], text='Order O2 (Gadget B, qty 1) is currently: Processing.', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')]\n\n\n\nr = chat.toolloop('Please cancel all orders for customer C1 for me.')\nres = list(r)\nfor o in res: display(getattr(o,'output',o))\n\n- Retrieving customer C1\n- Cancelling order O1\n- Cancelling order O2\n\n\n[ResponseReasoningItem(id='rs_6897e15728f4819396207358d0b5ff31070371bcef68a1b8', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"customer_id\":\"C1\"}', call_id='call_pfwlNfsFTJxcwhO5MiDnKFCc', name='get_customer_info', type='function_call', id='fc_6897e15a33c481938b60a80c6c9c6e75070371bcef68a1b8', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"customer_id\":\"C1\"}', call_id='call_pfwlNfsFTJxcwhO5MiDnKFCc', name='get_customer_info', type='function_call', id='fc_6897e15a33c481938b60a80c6c9c6e75070371bcef68a1b8', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_pfwlNfsFTJxcwhO5MiDnKFCc',\n 'output': \"{'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'orders': [{'id': 'O1', 'product': 'Widget A', 'quantity': 2, 'price': 19.99, 'status': 'Shipped'}, {'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Processing'}]}\"}\n\n\n[ResponseReasoningItem(id='rs_6897e15c06048193a117eba237950a60070371bcef68a1b8', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"order_id\":\"O1\"}', call_id='call_pGZ7LfguiTY7pTpE8IPPZDW3', name='cancel_order', type='function_call', id='fc_6897e15e276c8193a8bb5668615cb96d070371bcef68a1b8', status='completed'),\n ResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_TqGkkG2TRTXlXvoiBTgwJlZx', name='cancel_order', type='function_call', id='fc_6897e15e5ef88193b8678bd20f6d0104070371bcef68a1b8', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"order_id\":\"O1\"}', call_id='call_pGZ7LfguiTY7pTpE8IPPZDW3', name='cancel_order', type='function_call', id='fc_6897e15e276c8193a8bb5668615cb96d070371bcef68a1b8', status='completed')\n\n\nResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_TqGkkG2TRTXlXvoiBTgwJlZx', name='cancel_order', type='function_call', id='fc_6897e15e5ef88193b8678bd20f6d0104070371bcef68a1b8', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_pGZ7LfguiTY7pTpE8IPPZDW3',\n 'output': 'True'}\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_TqGkkG2TRTXlXvoiBTgwJlZx',\n 'output': 'True'}\n\n\n[ResponseReasoningItem(id='rs_6897e15fd9388193acca7aca2463bb9d070371bcef68a1b8', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseOutputMessage(id='msg_6897e16302e48193ad31367b6139e859070371bcef68a1b8', content=[ResponseOutputText(annotations=[], text='I cancelled all orders for customer C1 (John Doe, john@example.com).\\n\\nResults:\\n- Order O1 (Widget A, qty 2): Cancelled successfully.\\n- Order O2 (Gadget B, qty 1): Cancelled successfully.\\n\\nWould you like me to start refunds, send a cancellation confirmation email, or do anything else for John Doe?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')]\n\n\nResponseOutputMessage(id='msg_6897e16302e48193ad31367b6139e859070371bcef68a1b8', content=[ResponseOutputText(annotations=[], text='I cancelled all orders for customer C1 (John Doe, john@example.com).\\n\\nResults:\\n- Order O1 (Widget A, qty 2): Cancelled successfully.\\n- Order O2 (Gadget B, qty 1): Cancelled successfully.\\n\\nWould you like me to start refunds, send a cancellation confirmation email, or do anything else for John Doe?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')\n\n\n\n# cl = loop_outputs(res)\n# Markdown('\\n'.join(map(disp_tc, cl)))\n\n\nfor o in chat.toolloop('What is the status of order O2?'): display(o)\n\n- Retrieving order O2\n\n\n\nid: resp_6897e16824308193863428bf4240a87c070371bcef68a1b8\ncreated_at: 1754784104.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897e168e56c8193a92dbe9d9ac28d8c070371bcef68a1b8’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseFunctionToolCall(arguments=‘{“order_id”:“O2”}’, call_id=‘call_s79z5383Uxatc6sNpm33VEl1’, name=‘get_order_details’, type=‘function_call’, id=‘fc_6897e16a30708193a4f46fa44c3bb203070371bcef68a1b8’, status=‘completed’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘get_customer_info’, parameters={‘type’: ‘object’, ‘properties’: {‘customer_id’: {‘type’: ‘string’, ‘description’: ‘ID of the customer’}}, ‘required’: [‘customer_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=“Retrieves a customer’s information and their orders based on the customer ID”), FunctionTool(name=‘get_order_details’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Retrieves the details of a specific order based on the order ID’), FunctionTool(name=‘cancel_order’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order to cancel’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Cancels an order based on the provided order ID:- type: boolean’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=532, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=87, output_tokens_details=OutputTokensDetails(reasoning_tokens=64), total_tokens=619)\nuser: None\nstore: True\n\n\n\nResponseFunctionToolCall(arguments='{\"order_id\":\"O2\"}', call_id='call_s79z5383Uxatc6sNpm33VEl1', name='get_order_details', type='function_call', id='fc_6897e16a30708193a4f46fa44c3bb203070371bcef68a1b8', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_s79z5383Uxatc6sNpm33VEl1',\n 'output': \"{'id': 'O2', 'product': 'Gadget B', 'quantity': 1, 'price': 49.99, 'status': 'Cancelled'}\"}\n\n\nOrder O2 (Gadget B, qty 1) is currently: Cancelled.\n\n\nid: resp_6897e16b5fa88193b00c69f98e9dd053070371bcef68a1b8\ncreated_at: 1754784107.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897e16be6248193aa6c8c7968793ee4070371bcef68a1b8’, content=[ResponseOutputText(annotations=[], text=‘Order O2 (Gadget B, qty 1) is currently: Cancelled.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘get_customer_info’, parameters={‘type’: ‘object’, ‘properties’: {‘customer_id’: {‘type’: ‘string’, ‘description’: ‘ID of the customer’}}, ‘required’: [‘customer_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=“Retrieves a customer’s information and their orders based on the customer ID”), FunctionTool(name=‘get_order_details’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Retrieves the details of a specific order based on the order ID’), FunctionTool(name=‘cancel_order’, parameters={‘type’: ‘object’, ‘properties’: {‘order_id’: {‘type’: ‘string’, ‘description’: ‘ID of the order to cancel’}}, ‘required’: [‘order_id’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Cancels an order based on the provided order ID:- type: boolean’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=685, input_tokens_details=InputTokensDetails(cached_tokens=535), output_tokens=22, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=707)\nuser: None\nstore: True\n\n\n\n\n\n\nTest Math Example\n\ndef add(x: int, y: int) -&gt; int:\n    \"adds x and y.\"\n    return x + y\n\ndef mul(x: int, y: int) -&gt; int:\n    \"multiplies x and y.\"\n    return x * y\n\n\nchat = Chat(model, tools=[add, mul], **chatkw)\npr = 'Can you add 1258585825128 to 34959234595, multiply by 93, and then add (-12439149)?'\nr = chat.toolloop(pr)\nfor o in r: show(o)\n\n[ResponseReasoningItem(id='rs_6897e18c5388819190a54e0ce1441bdb015feb53bd0dd55d', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":1258585825128,\"y\":34959234595}', call_id='call_ueQGOLD99pG6r2sGdgsVKlw6', name='add', type='function_call', id='fc_6897e18e8f88819191645a755cda603e015feb53bd0dd55d', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"x\":1258585825128,\"y\":34959234595}', call_id='call_ueQGOLD99pG6r2sGdgsVKlw6', name='add', type='function_call', id='fc_6897e18e8f88819191645a755cda603e015feb53bd0dd55d', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_ueQGOLD99pG6r2sGdgsVKlw6',\n 'output': '1293545059723'}\n\n\n[ResponseReasoningItem(id='rs_6897e19014fc81919b186f766cb9b0b7015feb53bd0dd55d', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":1293545059723,\"y\":93}', call_id='call_3bMfuqmgxtFi73cSXwFpypFP', name='mul', type='function_call', id='fc_6897e190e7b88191a01ac2531eb232a4015feb53bd0dd55d', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"x\":1293545059723,\"y\":93}', call_id='call_3bMfuqmgxtFi73cSXwFpypFP', name='mul', type='function_call', id='fc_6897e190e7b88191a01ac2531eb232a4015feb53bd0dd55d', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_3bMfuqmgxtFi73cSXwFpypFP',\n 'output': '120299690554239'}\n\n\n[ResponseReasoningItem(id='rs_6897e192bbbc8191bf48ca20d003dfc1015feb53bd0dd55d', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":120299690554239,\"y\":-12439149}', call_id='call_ildkWrO6EHnC0jtBFXAq93P5', name='add', type='function_call', id='fc_6897e1935f7481918b1d79751e99aede015feb53bd0dd55d', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"x\":120299690554239,\"y\":-12439149}', call_id='call_ildkWrO6EHnC0jtBFXAq93P5', name='add', type='function_call', id='fc_6897e1935f7481918b1d79751e99aede015feb53bd0dd55d', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_ildkWrO6EHnC0jtBFXAq93P5',\n 'output': '120299678115090'}\n\n\n120,299,678,115,090\n\n\nid: resp_6897e19438d081919b9c36459cc8cd50015feb53bd0dd55d\ncreated_at: 1754784148.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897e194c62481918b6ac433e9648d01015feb53bd0dd55d’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897e195ccbc8191806147fc7db8fe8e015feb53bd0dd55d’, content=[ResponseOutputText(annotations=[], text=‘120,299,678,115,090’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘add’, parameters={‘type’: ‘object’, ‘properties’: {‘x’: {‘type’: ‘integer’, ‘description’: ’‘}, ’y’: {‘type’: ‘integer’, ‘description’: ’‘}}, ’required’: [‘x’, ‘y’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘adds x and y.:- type: integer’), FunctionTool(name=‘mul’, parameters={‘type’: ‘object’, ‘properties’: {‘x’: {‘type’: ‘integer’, ‘description’: ’‘}, ’y’: {‘type’: ‘integer’, ‘description’: ’‘}}, ’required’: [‘x’, ‘y’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘multiplies x and y.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=496, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=79, output_tokens_details=OutputTokensDetails(reasoning_tokens=64), total_tokens=575)\nuser: None\nstore: True\n\n\n\n\nResponseOutputMessage(id='msg_6897e195ccbc8191806147fc7db8fe8e015feb53bd0dd55d', content=[ResponseOutputText(annotations=[], text='120,299,678,115,090', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')\n\n\n\n(1258585825128 + 34959234595) * 93 - 12439149\n\n120299678115090\n\n\n\nchat = Chat(model, tools=[add, mul], **chatkw)\nr = chat.toolloop(pr, stream=True)\nfor o in r:\n    if isinstance(o, dict): print('- ', o)\n    else:\n        for p in o: print(p, end='')\n        if hasattr(o, 'value'): show(o.value)\n\n[ResponseReasoningItem(id='rs_6897e1c5d79081a3ae88e03578f661a90c8460ccb833b112', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":1258585825128,\"y\":34959234595}', call_id='call_SdIaAHdmOEYB4tAU7E6vh3p4', name='add', type='function_call', id='fc_6897e1c6170081a3b97d0966c86325730c8460ccb833b112', status='completed')]\n\n\n('arguments', '{\"x\":1258585825128,\"y\":34959234595}')('call_id', 'call_SdIaAHdmOEYB4tAU7E6vh3p4')('name', 'add')('type', 'function_call')('id', 'fc_6897e1c6170081a3b97d0966c86325730c8460ccb833b112')('status', 'completed')-  {'type': 'function_call_output', 'call_id': 'call_SdIaAHdmOEYB4tAU7E6vh3p4', 'output': '1293545059723'}\n\n\n[ResponseReasoningItem(id='rs_6897e1c72d0481a38ffd9daf156d758e0c8460ccb833b112', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":1293545059723,\"y\":93}', call_id='call_kjtm1Q8cccNUleOw1msfEgmK', name='mul', type='function_call', id='fc_6897e1c77bac81a3baf3e35799923fc80c8460ccb833b112', status='completed')]\n\n\n('arguments', '{\"x\":1293545059723,\"y\":93}')('call_id', 'call_kjtm1Q8cccNUleOw1msfEgmK')('name', 'mul')('type', 'function_call')('id', 'fc_6897e1c77bac81a3baf3e35799923fc80c8460ccb833b112')('status', 'completed')-  {'type': 'function_call_output', 'call_id': 'call_kjtm1Q8cccNUleOw1msfEgmK', 'output': '120299690554239'}\n\n\n[ResponseReasoningItem(id='rs_6897e1c87c7081a38c9faf505ed5e29a0c8460ccb833b112', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"x\":120299690554239,\"y\":-12439149}', call_id='call_cuKZQ6Oa3Lc2P75mDEx0jugE', name='add', type='function_call', id='fc_6897e1c8c5e481a3a9bb8a58bda392740c8460ccb833b112', status='completed')]\n\n\n('arguments', '{\"x\":120299690554239,\"y\":-12439149}')('call_id', 'call_cuKZQ6Oa3Lc2P75mDEx0jugE')('name', 'add')('type', 'function_call')('id', 'fc_6897e1c8c5e481a3a9bb8a58bda392740c8460ccb833b112')('status', 'completed')-  {'type': 'function_call_output', 'call_id': 'call_cuKZQ6Oa3Lc2P75mDEx0jugE', 'output': '120299678115090'}\n120,299,678,115,090\n\n\n120,299,678,115,090\n\n\nid: resp_6897e1c9821081a3a1f3648c7b2bf4320c8460ccb833b112\ncreated_at: 1754784201.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897e1ca77d081a3b2636d387eea6f370c8460ccb833b112’, content=[ResponseOutputText(annotations=[], text=‘120,299,678,115,090’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘add’, parameters={‘type’: ‘object’, ‘properties’: {‘x’: {‘type’: ‘integer’, ‘description’: ’‘}, ’y’: {‘type’: ‘integer’, ‘description’: ’‘}}, ’required’: [‘x’, ‘y’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘adds x and y.:- type: integer’), FunctionTool(name=‘mul’, parameters={‘type’: ‘object’, ‘properties’: {‘x’: {‘type’: ‘integer’, ‘description’: ’‘}, ’y’: {‘type’: ‘integer’, ‘description’: ’‘}}, ’required’: [‘x’, ‘y’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘multiplies x and y.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=278, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=13, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=291)\nuser: None\nstore: True\n\n\n\n\n\n\nError Conditions: Out of Iterations, Exception During Tool Invocation\n\ndef mydiv(a:float, b:float):\n    \"Divide two numbers\"\n    return a / b\n\n\nchat = Chat(model, tools=[mydiv], **chatkw)\nr = chat.toolloop('Please calculate this sequence using your tools: 43/23454; 652/previous result; 6843/previous result; 321/previous result', max_steps=2)\nfor o in r: show(o)\n\n[ResponseReasoningItem(id='rs_6897e1e3f7d08190819e22b16bd62a6b047a40cd4df49f91', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":43,\"b\":23454}', call_id='call_1EchGcZOxUCwzWFmPG6ZbagQ', name='mydiv', type='function_call', id='fc_6897e1e44ac08190819052abd2ee034a047a40cd4df49f91', status='completed'),\n ResponseFunctionToolCall(arguments='{\"a\":652,\"b\":0}', call_id='call_VzY6kLA8EYBQWLQyM1P7Uu39', name='mydiv', type='function_call', id='fc_6897e1e4736c819093be6536512c13f8047a40cd4df49f91', status='completed'),\n ResponseFunctionToolCall(arguments='{\"a\":6843,\"b\":0}', call_id='call_Ifuh3smqGl5gBCHuqPOyAwWC', name='mydiv', type='function_call', id='fc_6897e1e499788190adcc563eb10050d6047a40cd4df49f91', status='completed'),\n ResponseFunctionToolCall(arguments='{\"a\":321,\"b\":0}', call_id='call_Ib36ay9PqhAms1U200xMh3AB', name='mydiv', type='function_call', id='fc_6897e1e4c6f48190b4715a9fcfc33d4e047a40cd4df49f91', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"a\":43,\"b\":23454}', call_id='call_1EchGcZOxUCwzWFmPG6ZbagQ', name='mydiv', type='function_call', id='fc_6897e1e44ac08190819052abd2ee034a047a40cd4df49f91', status='completed')\n\n\nResponseFunctionToolCall(arguments='{\"a\":652,\"b\":0}', call_id='call_VzY6kLA8EYBQWLQyM1P7Uu39', name='mydiv', type='function_call', id='fc_6897e1e4736c819093be6536512c13f8047a40cd4df49f91', status='completed')\n\n\nResponseFunctionToolCall(arguments='{\"a\":6843,\"b\":0}', call_id='call_Ifuh3smqGl5gBCHuqPOyAwWC', name='mydiv', type='function_call', id='fc_6897e1e499788190adcc563eb10050d6047a40cd4df49f91', status='completed')\n\n\nResponseFunctionToolCall(arguments='{\"a\":321,\"b\":0}', call_id='call_Ib36ay9PqhAms1U200xMh3AB', name='mydiv', type='function_call', id='fc_6897e1e4c6f48190b4715a9fcfc33d4e047a40cd4df49f91', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_1EchGcZOxUCwzWFmPG6ZbagQ',\n 'output': '0.001833375969983798'}\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_VzY6kLA8EYBQWLQyM1P7Uu39',\n 'output': 'Traceback (most recent call last):\\n  File \"/Users/jhoward/aai-ws/toolslm/toolslm/funccall.py\", line 203, in call_func\\n    try: return func(**fc_inputs)\\n                ^^^^^^^^^^^^^^^^^\\n  File \"/var/folders/51/b2_szf2945n072c0vj2cyty40000gn/T/ipykernel_23490/246724137.py\", line 3, in mydiv\\n    return a / b\\n           ~~^~~\\nZeroDivisionError: division by zero\\n'}\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_Ifuh3smqGl5gBCHuqPOyAwWC',\n 'output': 'Traceback (most recent call last):\\n  File \"/Users/jhoward/aai-ws/toolslm/toolslm/funccall.py\", line 203, in call_func\\n    try: return func(**fc_inputs)\\n                ^^^^^^^^^^^^^^^^^\\n  File \"/var/folders/51/b2_szf2945n072c0vj2cyty40000gn/T/ipykernel_23490/246724137.py\", line 3, in mydiv\\n    return a / b\\n           ~~^~~\\nZeroDivisionError: division by zero\\n'}\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_Ib36ay9PqhAms1U200xMh3AB',\n 'output': 'Traceback (most recent call last):\\n  File \"/Users/jhoward/aai-ws/toolslm/toolslm/funccall.py\", line 203, in call_func\\n    try: return func(**fc_inputs)\\n                ^^^^^^^^^^^^^^^^^\\n  File \"/var/folders/51/b2_szf2945n072c0vj2cyty40000gn/T/ipykernel_23490/246724137.py\", line 3, in mydiv\\n    return a / b\\n           ~~^~~\\nZeroDivisionError: division by zero\\n'}\n\n\nI successfully computed the first division: - 43 / 23454 = 0.001833375969983798\nI was then instructed to divide 652 by the “previous result” and continue chaining divisions, but my subsequent tool calls failed because I attempted to divide by zero (the tool calls were given invalid b=0), so I could not complete the remaining steps.\nTo finish the sequence you want, the next steps are: 1) Compute 652 / 0.001833375969983798 = 355,554.879… (approx) 2) Compute 6843 / (result of step 1) = 0.019247… (approx) 3) Compute 321 / (result of step 2) = 16,683.6… (approx)\nIf you want, I can now compute those three remaining divisions directly (no tools required) and give exact or rounded results. Which would you prefer?\n\n\nid: resp_6897e1e562908190a3ecc40a07d57645047a40cd4df49f91\ncreated_at: 1754784229.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897e1e5fafc81909e1cbc28898ba791047a40cd4df49f91’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897e1e61cdc81909f47e73a5337ebec047a40cd4df49f91’, content=[ResponseOutputText(annotations=[], text=‘I successfully computed the first division:- 43 / 23454 = 0.001833375969983798was then instructed to divide 652 by the “previous result” and continue chaining divisions, but my subsequent tool calls failed because I attempted to divide by zero (the tool calls were given invalid b=0), so I could not complete the remaining steps.finish the sequence you want, the next steps are:) Compute 652 / 0.001833375969983798 = 355,554.879… (approx)) Compute 6843 / (result of step 1) = 0.019247… (approx)) Compute 321 / (result of step 2) = 16,683.6… (approx)you want, I can now compute those three remaining divisions directly (no tools required) and give exact or rounded results. Which would you prefer?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘mydiv’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘number’, ‘description’: ’‘}, ’b’: {‘type’: ‘number’, ‘description’: ’‘}}, ’required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Divide two numbers’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=603, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=199, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=802)\nuser: None\nstore: True\n\n\n\n\nResponseOutputMessage(id='msg_6897e1e61cdc81909f47e73a5337ebec047a40cd4df49f91', content=[ResponseOutputText(annotations=[], text='I successfully computed the first division:\\n- 43 / 23454 = 0.001833375969983798\\n\\nI was then instructed to divide 652 by the \"previous result\" and continue chaining divisions, but my subsequent tool calls failed because I attempted to divide by zero (the tool calls were given invalid b=0), so I could not complete the remaining steps.\\n\\nTo finish the sequence you want, the next steps are:\\n1) Compute 652 / 0.001833375969983798 = 355,554.879... (approx)\\n2) Compute 6843 / (result of step 1) = 0.019247... (approx)\\n3) Compute 321 / (result of step 2) = 16,683.6... (approx)\\n\\nIf you want, I can now compute those three remaining divisions directly (no tools required) and give exact or rounded results. Which would you prefer?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')\n\n\nThis tests raise_on_err=False change to toolslm.call_func invocation. We should see this return an error as a string instead of crash:\n\nchat = Chat(model, tools=[mydiv], **chatkw)\nr = chat.toolloop('Try dividing 1 by 0 and see what the error result is')\nfor o in r: show(o)\n\n[ResponseReasoningItem(id='rs_6897e1e939d48193a63805a335b1a33304d3e564186ebe0a', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":1,\"b\":0}', call_id='call_dxZkdTpNuZH6tWjycwgHZeo9', name='mydiv', type='function_call', id='fc_6897e1e999a08193b7f7af1bc2c213ec04d3e564186ebe0a', status='completed')]\n\n\nResponseFunctionToolCall(arguments='{\"a\":1,\"b\":0}', call_id='call_dxZkdTpNuZH6tWjycwgHZeo9', name='mydiv', type='function_call', id='fc_6897e1e999a08193b7f7af1bc2c213ec04d3e564186ebe0a', status='completed')\n\n\n{'type': 'function_call_output',\n 'call_id': 'call_dxZkdTpNuZH6tWjycwgHZeo9',\n 'output': 'Traceback (most recent call last):\\n  File \"/Users/jhoward/aai-ws/toolslm/toolslm/funccall.py\", line 203, in call_func\\n    try: return func(**fc_inputs)\\n                ^^^^^^^^^^^^^^^^^\\n  File \"/var/folders/51/b2_szf2945n072c0vj2cyty40000gn/T/ipykernel_23490/246724137.py\", line 3, in mydiv\\n    return a / b\\n           ~~^~~\\nZeroDivisionError: division by zero\\n'}\n\n\nThe function raised a ZeroDivisionError with message: “division by zero”.\n\n\nid: resp_6897e1eac59c81938b9c646c2a8c34ef04d3e564186ebe0a\ncreated_at: 1754784234.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897e1eb389081939fdcfd37dbf877e404d3e564186ebe0a’, content=[ResponseOutputText(annotations=[], text=‘The function raised a ZeroDivisionError with message: “division by zero”.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘mydiv’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘number’, ‘description’: ’‘}, ’b’: {‘type’: ‘number’, ‘description’: ’‘}}, ’required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Divide two numbers’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=220, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=19, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=239)\nuser: None\nstore: True",
    "crumbs": [
      "Tool loop"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cosette",
    "section": "",
    "text": "pip install cosette",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cosette",
    "section": "",
    "text": "pip install cosette",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "cosette",
    "section": "Getting started",
    "text": "Getting started\nOpenAI’s Python SDK will automatically be installed with Cosette, if you don’t already have it.\n\nfrom cosette import *\n\nCosette only exports the symbols that are needed to use the library, so you can use import * to import them. Alternatively, just use:\nimport cosette\n…and then add the prefix cosette. to any usages of the module.\nCosette provides models, which is a list of models currently available from the SDK.\n\n' '.join(models)\n\n'gpt-5 gpt-5-mini gpt-5-nano o1-preview o1-mini gpt-4o gpt-4o-mini gpt-4-turbo gpt-4 gpt-4-32k gpt-3.5-turbo gpt-3.5-turbo-instruct o1 o3-mini chatgpt-4o-latest o1-pro o3 o4-mini gpt-4.1 gpt-4.1-mini gpt-4.1-nano'\n\n\nFor these examples, we’ll use GPT-5-mini.\n\nmodel = models[1]",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#chat",
    "href": "index.html#chat",
    "title": "cosette",
    "section": "Chat",
    "text": "Chat\nThe main interface to Cosette is the Chat class, which provides a stateful interface to the models. You can pass message keywords to either Chat or when you call the model.\n\nchatkw = dict(\n    text={ \"verbosity\": \"low\" },\n    reasoning={ \"effort\": \"minimal\" }\n)\n\n\nchat = Chat(model, sp=\"You are a helpful and concise assistant.\", **chatkw)\nchat(\"I'm Jeremy\")\n\nNice to meet you, Jeremy. How can I help you today?\n\n\nid: resp_6897d6bf742081a29d6f5ed0d4fcc6b905935ac4b74d3abc\ncreated_at: 1754781375.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful and concise assistant.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d6bfbc3481a294c74c025cf3965605935ac4b74d3abc’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d6bfd4e481a2a3b96e6859d73d0005935ac4b74d3abc’, content=[ResponseOutputText(annotations=[], text=‘Nice to meet you, Jeremy. How can I help you today?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=20, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=20, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=40)\nuser: None\nstore: True\n\n\n\n\n\nr = chat(\"What's my name?\")\nr\n\nYour name is Jeremy.\n\n\nid: resp_6897d6c249c481a2ab32c89f1f9e5ffe05935ac4b74d3abc\ncreated_at: 1754781378.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful and concise assistant.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d6c31b3081a29771f246090620aa05935ac4b74d3abc’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d6c327a081a2bae1eec5cd30917305935ac4b74d3abc’, content=[ResponseOutputText(annotations=[], text=‘Your name is Jeremy.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=48, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=11, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=59)\nuser: None\nstore: True\n\n\n\n\nAs you see above, displaying the results of a call in a notebook shows just the message contents, with the other details hidden behind a collapsible section. Alternatively you can print the details:\n\nprint(r)\n\nResponse(id='resp_6897d6c249c481a2ab32c89f1f9e5ffe05935ac4b74d3abc', created_at=1754781378.0, error=None, incomplete_details=None, instructions='You are a helpful and concise assistant.', metadata={}, model='gpt-5-mini-2025-08-07', object='response', output=[ResponseReasoningItem(id='rs_6897d6c31b3081a29771f246090620aa05935ac4b74d3abc', summary=[], type='reasoning', content=None, encrypted_content=None, status=None), ResponseOutputMessage(id='msg_6897d6c327a081a2bae1eec5cd30917305935ac4b74d3abc', content=[ResponseOutputText(annotations=[], text='Your name is Jeremy.', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=4096, max_tool_calls=None, previous_response_id=None, prompt=None, prompt_cache_key=None, reasoning=Reasoning(effort='minimal', generate_summary=None, summary=None), safety_identifier=None, service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatText(type='text'), verbosity='low'), top_logprobs=0, truncation='disabled', usage=In: 48; Out: 11; Total: 59, user=None, store=True)\n\n\nYou can use stream=True to stream the results as soon as they arrive (although you will only see the gradual generation if you execute the notebook yourself, of course!)\n\nfor o in chat(\"What's your name?\", stream=True): print(o, end='')\n\nI'm ChatGPT.",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#model-capabilities",
    "href": "index.html#model-capabilities",
    "title": "cosette",
    "section": "Model Capabilities",
    "text": "Model Capabilities\nDifferent OpenAI models have different capabilities. Some models such as o1-mini do not have support for streaming, system prompts, or temperature. Query these capbilities using these functions:\n\n# o1 does not support streaming or setting the temperature\ncan_stream('o1'), can_set_sp('o1'), can_set_temp('o1')\n\n(True, True, False)\n\n\n\n# gpt-4o has these capabilities\ncan_stream('gpt-4o'), can_set_sp('gpt-4o'), can_set_temp('gpt-4o')\n\n(True, True, True)",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#tool-use",
    "href": "index.html#tool-use",
    "title": "cosette",
    "section": "Tool use",
    "text": "Tool use\nTool use lets the model use external tools.\nWe use docments to make defining Python functions as ergonomic as possible. Each parameter (and the return value) should have a type, and a docments comment with the description of what it is. As an example we’ll write a simple function that adds numbers together, and will tell us when it’s being called:\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int=1 # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return a + b\n\nSometimes the model will say something like “according to the sums tool the answer is” – generally we’d rather it just tells the user the answer, so we can use a system prompt to help with this:\n\nsp = \"Never mention what tools you use.\"\n\nWe’ll get the model to add up some long numbers:\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\npr\n\n'What is 604542+6458932?'\n\n\nTo use tools, pass a list of them to Chat:\n\nchat = Chat(model, sp=sp, tools=[sums], **chatkw)\n\nNow when we call that with our prompt, the model doesn’t return the answer, but instead returns a tool_use message, which means we have to call the named tool with the provided parameters:\n\nr = chat(pr)\nr.output\n\nFinding the sum of 604542 and 6458932\n\n\n[ResponseReasoningItem(id='rs_6897d70b74b4819f97bd7ccb549bce65056524066556f4c9', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_RFHB5vQbpgkpuPGN2cdSMHlJ', name='sums', type='function_call', id='fc_6897d70bab7c819fb48d16260fb4118c056524066556f4c9', status='completed')]\n\n\nCosette handles all that for us – we just have to pass along the message, and it all happens automatically:\n\nchat()\n\n7,063,474\n\n\nid: resp_6897d70dd204819fbb21bfd7608ae6dd056524066556f4c9\ncreated_at: 1754781453.0\nerror: None\nincomplete_details: None\ninstructions: Never mention what tools you use.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897d70e51b0819f8993eba3ec6ca440056524066556f4c9’, content=[ResponseOutputText(annotations=[], text=‘7,063,474’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’, ‘default’: 1}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=142, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=9, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=151)\nuser: None\nstore: True\n\n\n\n\nYou can see how many tokens have been used at any time by checking the use property.\n\nchat.use\n\nIn: 231; Out: 36; Total: 267\n\n\n\nTool loop\n\ndef show(x):\n    if getattr(x, 'output_text', None): display(x)\n\nWe can do everything needed to use tools in a single step, by using Chat.toolloop. This can even call multiple tools as needed solve a problem. For example, let’s define a tool to handle multiplication:\n\ndef mults(\n    a:int,  # First thing to multiply\n    b:int=1 # Second thing to multiply\n) -&gt; int: # The product of the inputs\n    \"Multiplies a * b.\"\n    print(f\"Finding the product of {a} and {b}\")\n    return a * b\n\nNow with a single call we can calculate (a+b)*2:\n\nchat = Chat(model, tools=[sums,mults], **chatkw)\npr = f'Calculate ({a}+{b})*2 and display the result as US$'\npr\n\n'Calculate (604542+6458932)*2 and display the result as US$'\n\n\n\nr = chat.toolloop(pr)\n\n\nfor o in r: show(o)\n\nFinding the sum of 604542 and 6458932\nFinding the product of 7063474 and 2\n\n\nUS$14,126,948\n\n\nid: resp_6897e3bb932081969ee99109c1b66db20b5a46ab1de6956b\ncreated_at: 1754784699.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897e3bbe2948196a0e696d834f92b5a0b5a46ab1de6956b’, content=[ResponseOutputText(annotations=[], text=‘US$14,126,948’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’, ‘default’: 1}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’), FunctionTool(name=‘mults’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to multiply’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to multiply’, ‘default’: 1}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Multiplies a * b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=225, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=11, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=236)\nuser: None\nstore: True",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "index.html#images",
    "href": "index.html#images",
    "title": "cosette",
    "section": "Images",
    "text": "Images\nAs everyone knows, when testing image APIs you have to use a cute puppy.\n\nfn = Path('samples/puppy.jpg')\nImage(filename=fn, width=200)\n\n\n\n\n\n\n\n\nWe create a Chat object as before:\n\nchat = Chat(model, **chatkw)\n\nClaudia expects images as a list of bytes, so we read in the file:\n\nimg = fn.read_bytes()\n\nPrompts to Claudia can be lists, containing text, images, or both, eg:\n\nchat([img, \"In brief, what color flowers are in this image?\"])\n\nPurple.\n\n\nid: resp_6897d7493f148197a7555683dead90e504a418ea2e45fb88\ncreated_at: 1754781513.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d74a033081979b865a7ceeb4084e04a418ea2e45fb88’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d74a1d70819790b7a077a0dfcd0804a418ea2e45fb88’, content=[ResponseOutputText(annotations=[], text=‘Purple.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=102, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=8, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=110)\nuser: None\nstore: True\n\n\n\n\nThe image is included as input tokens.\n\nchat.use\n\nIn: 102; Out: 8; Total: 110\n\n\nAlternatively, Cosette supports creating a multi-stage chat with separate image and text prompts. For instance, you can pass just the image as the initial prompt (in which case the model will make some general comments about what it sees), and then follow up with questions in additional prompts:\n\nchat = Chat(model, **chatkw)\nchat(img)\n\nWhat would you like to know or do with this photo of the puppy? (e.g., identify breed, give care tips, help with caption, edit suggestions)\n\n\nid: resp_6897d74cc47881a3957fdb4946c7e02603dfba9cf4322ea6\ncreated_at: 1754781516.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d74d2bfc81a39f3ffde4ccf99c9503dfba9cf4322ea6’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d74d44e481a3971238c119e8f71d03dfba9cf4322ea6’, content=[ResponseOutputText(annotations=[], text=‘What would you like to know or do with this photo of the puppy? (e.g., identify breed, give care tips, help with caption, edit suggestions)’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=92, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=39, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=131)\nuser: None\nstore: True\n\n\n\n\n\nchat('What direction is the puppy facing?')\n\nThe puppy is facing toward the camera (slightly to the viewer’s right).\n\n\nid: resp_6897d74eab1c81a390df5c03ad22415403dfba9cf4322ea6\ncreated_at: 1754781518.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d74f1be481a3ad6c67714d67106403dfba9cf4322ea6’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d74f336081a3820708998493d90f03dfba9cf4322ea6’, content=[ResponseOutputText(annotations=[], text=‘The puppy is facing toward the camera (slightly to the viewer’s right).’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=142, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=22, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=164)\nuser: None\nstore: True\n\n\n\n\n\nchat('What color is it?')\n\nThe puppy is mostly white with brown patches (brown ears and brown markings on the face).\n\n\nid: resp_6897d74fede481a389bac0f29103f0a903dfba9cf4322ea6\ncreated_at: 1754781520.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d750c6e881a3bc2c39941787c97303dfba9cf4322ea6’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d750e8ec81a38c30a0f7c6dce6d203dfba9cf4322ea6’, content=[ResponseOutputText(annotations=[], text=‘The puppy is mostly white with brown patches (brown ears and brown markings on the face).’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=173, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=24, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=197)\nuser: None\nstore: True\n\n\n\n\nNote that the image is passed in again for every input in the dialog, so that number of input tokens increases quickly with this kind of chat.\n\nchat.use\n\nIn: 407; Out: 85; Total: 492",
    "crumbs": [
      "cosette"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Cosette’s source",
    "section": "",
    "text": "from IPython.display import display,Image,Markdown\nfrom datetime import datetime\nfrom pprint import pprint\n\n\ndef print_columns(items, cols=3, width=30):\n    for i in range(0, len(items), cols):\n        row = items[i:i+cols]\n        print(''.join(item[:width-1].ljust(width) for item in row))\n\nclient = OpenAI()\nmodel_list = client.models.list()\nprint(f\"Available models as of {datetime.now().strftime('%Y-%m-%d')}:\\n\")\nprint_columns(sorted([m.id for m in model_list]))\n\nAvailable models as of 2025-08-10:\n\nbabbage-002                   chatgpt-4o-latest             codex-mini-latest             \ncomputer-use-preview          computer-use-preview-2025-03- dall-e-2                      \ndall-e-3                      davinci-002                   ft:gpt-4o-2024-08-06:answerai \nft:gpt-4o-2024-08-06:answerai ft:gpt-4o-2024-08-06:answerai ft:gpt-4o-mini-2024-07-18:ans \nft:gpt-4o-mini-2024-07-18:ans gpt-3.5-turbo                 gpt-3.5-turbo-0125            \ngpt-3.5-turbo-1106            gpt-3.5-turbo-16k             gpt-3.5-turbo-instruct        \ngpt-3.5-turbo-instruct-0914   gpt-4                         gpt-4-0125-preview            \ngpt-4-1106-preview            gpt-4-turbo                   gpt-4-turbo-2024-04-09        \ngpt-4-turbo-preview           gpt-4.1                       gpt-4.1-2025-04-14            \ngpt-4.1-mini                  gpt-4.1-mini-2025-04-14       gpt-4.1-nano                  \ngpt-4.1-nano-2025-04-14       gpt-4o                        gpt-4o-2024-05-13             \ngpt-4o-2024-08-06             gpt-4o-2024-11-20             gpt-4o-audio-preview          \ngpt-4o-audio-preview-2024-10- gpt-4o-audio-preview-2024-12- gpt-4o-audio-preview-2025-06- \ngpt-4o-mini                   gpt-4o-mini-2024-07-18        gpt-4o-mini-audio-preview     \ngpt-4o-mini-audio-preview-202 gpt-4o-mini-realtime-preview  gpt-4o-mini-realtime-preview- \ngpt-4o-mini-search-preview    gpt-4o-mini-search-preview-20 gpt-4o-mini-transcribe        \ngpt-4o-mini-tts               gpt-4o-realtime-preview       gpt-4o-realtime-preview-2024- \ngpt-4o-realtime-preview-2024- gpt-4o-realtime-preview-2025- gpt-4o-search-preview         \ngpt-4o-search-preview-2025-03 gpt-4o-transcribe             gpt-5                         \ngpt-5-2025-08-07              gpt-5-chat-latest             gpt-5-mini                    \ngpt-5-mini-2025-08-07         gpt-5-nano                    gpt-5-nano-2025-08-07         \ngpt-image-1                   o1                            o1-2024-12-17                 \no1-mini                       o1-mini-2024-09-12            o1-pro                        \no1-pro-2025-03-19             o3                            o3-2025-04-16                 \no3-deep-research              o3-deep-research-2025-06-26   o3-mini                       \no3-mini-2025-01-31            o3-pro                        o3-pro-2025-06-10             \no4-mini                       o4-mini-2025-04-16            o4-mini-deep-research         \no4-mini-deep-research-2025-06 omni-moderation-2024-09-26    omni-moderation-latest        \ntext-embedding-3-large        text-embedding-3-small        text-embedding-ada-002        \ntts-1                         tts-1-1106                    tts-1-hd                      \ntts-1-hd-1106                 whisper-1                     \n\n\n\n\nExported source\nmodels = 'gpt-5', 'gpt-5-mini', 'gpt-5-nano', 'o1-preview', 'o1-mini', 'gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-4-32k', 'gpt-3.5-turbo', 'gpt-3.5-turbo-instruct', 'o1', 'o3-mini', 'chatgpt-4o-latest', 'o1-pro', 'o3', 'o4-mini', 'gpt-4.1', 'gpt-4.1-mini', 'gpt-4.1-nano'\n\n\no1 should support images while o1-mini, o3-mini do not support images.\n\nsource\n\n\n\n can_set_temp (m)\n\n\n\nExported source\ntext_only_models = 'o1-preview', 'o1-mini', 'o3-mini'\n\n\n\n\nExported source\nhas_streaming_models = set(models) - set(('o1-mini', 'o3-mini'))\nhas_sp_models = set(models) - set(('o1-mini', 'o3-mini'))\nhas_temp_models = set(models) - set(('o1', 'o1-mini', 'o3-mini'))\n\n\n\n\nExported source\ndef can_stream(m): return m in has_streaming_models\ndef can_set_sp(m): return m in has_sp_models\ndef can_set_temp(m): return m in has_temp_models\n\n\n\nsource\n\n\n\n\n can_set_sp (m)\n\n\nsource\n\n\n\n\n can_stream (m)\n\n\nassert can_stream(\"gpt-4o\")\nassert not can_stream(\"o1-mini\")\n\n\nmodel = 'gpt-5-mini'",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#setup",
    "href": "core.html#setup",
    "title": "Cosette’s source",
    "section": "",
    "text": "from IPython.display import display,Image,Markdown\nfrom datetime import datetime\nfrom pprint import pprint\n\n\ndef print_columns(items, cols=3, width=30):\n    for i in range(0, len(items), cols):\n        row = items[i:i+cols]\n        print(''.join(item[:width-1].ljust(width) for item in row))\n\nclient = OpenAI()\nmodel_list = client.models.list()\nprint(f\"Available models as of {datetime.now().strftime('%Y-%m-%d')}:\\n\")\nprint_columns(sorted([m.id for m in model_list]))\n\nAvailable models as of 2025-08-10:\n\nbabbage-002                   chatgpt-4o-latest             codex-mini-latest             \ncomputer-use-preview          computer-use-preview-2025-03- dall-e-2                      \ndall-e-3                      davinci-002                   ft:gpt-4o-2024-08-06:answerai \nft:gpt-4o-2024-08-06:answerai ft:gpt-4o-2024-08-06:answerai ft:gpt-4o-mini-2024-07-18:ans \nft:gpt-4o-mini-2024-07-18:ans gpt-3.5-turbo                 gpt-3.5-turbo-0125            \ngpt-3.5-turbo-1106            gpt-3.5-turbo-16k             gpt-3.5-turbo-instruct        \ngpt-3.5-turbo-instruct-0914   gpt-4                         gpt-4-0125-preview            \ngpt-4-1106-preview            gpt-4-turbo                   gpt-4-turbo-2024-04-09        \ngpt-4-turbo-preview           gpt-4.1                       gpt-4.1-2025-04-14            \ngpt-4.1-mini                  gpt-4.1-mini-2025-04-14       gpt-4.1-nano                  \ngpt-4.1-nano-2025-04-14       gpt-4o                        gpt-4o-2024-05-13             \ngpt-4o-2024-08-06             gpt-4o-2024-11-20             gpt-4o-audio-preview          \ngpt-4o-audio-preview-2024-10- gpt-4o-audio-preview-2024-12- gpt-4o-audio-preview-2025-06- \ngpt-4o-mini                   gpt-4o-mini-2024-07-18        gpt-4o-mini-audio-preview     \ngpt-4o-mini-audio-preview-202 gpt-4o-mini-realtime-preview  gpt-4o-mini-realtime-preview- \ngpt-4o-mini-search-preview    gpt-4o-mini-search-preview-20 gpt-4o-mini-transcribe        \ngpt-4o-mini-tts               gpt-4o-realtime-preview       gpt-4o-realtime-preview-2024- \ngpt-4o-realtime-preview-2024- gpt-4o-realtime-preview-2025- gpt-4o-search-preview         \ngpt-4o-search-preview-2025-03 gpt-4o-transcribe             gpt-5                         \ngpt-5-2025-08-07              gpt-5-chat-latest             gpt-5-mini                    \ngpt-5-mini-2025-08-07         gpt-5-nano                    gpt-5-nano-2025-08-07         \ngpt-image-1                   o1                            o1-2024-12-17                 \no1-mini                       o1-mini-2024-09-12            o1-pro                        \no1-pro-2025-03-19             o3                            o3-2025-04-16                 \no3-deep-research              o3-deep-research-2025-06-26   o3-mini                       \no3-mini-2025-01-31            o3-pro                        o3-pro-2025-06-10             \no4-mini                       o4-mini-2025-04-16            o4-mini-deep-research         \no4-mini-deep-research-2025-06 omni-moderation-2024-09-26    omni-moderation-latest        \ntext-embedding-3-large        text-embedding-3-small        text-embedding-ada-002        \ntts-1                         tts-1-1106                    tts-1-hd                      \ntts-1-hd-1106                 whisper-1                     \n\n\n\n\nExported source\nmodels = 'gpt-5', 'gpt-5-mini', 'gpt-5-nano', 'o1-preview', 'o1-mini', 'gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-4-32k', 'gpt-3.5-turbo', 'gpt-3.5-turbo-instruct', 'o1', 'o3-mini', 'chatgpt-4o-latest', 'o1-pro', 'o3', 'o4-mini', 'gpt-4.1', 'gpt-4.1-mini', 'gpt-4.1-nano'\n\n\no1 should support images while o1-mini, o3-mini do not support images.\n\nsource\n\n\n\n can_set_temp (m)\n\n\n\nExported source\ntext_only_models = 'o1-preview', 'o1-mini', 'o3-mini'\n\n\n\n\nExported source\nhas_streaming_models = set(models) - set(('o1-mini', 'o3-mini'))\nhas_sp_models = set(models) - set(('o1-mini', 'o3-mini'))\nhas_temp_models = set(models) - set(('o1', 'o1-mini', 'o3-mini'))\n\n\n\n\nExported source\ndef can_stream(m): return m in has_streaming_models\ndef can_set_sp(m): return m in has_sp_models\ndef can_set_temp(m): return m in has_temp_models\n\n\n\nsource\n\n\n\n\n can_set_sp (m)\n\n\nsource\n\n\n\n\n can_stream (m)\n\n\nassert can_stream(\"gpt-4o\")\nassert not can_stream(\"o1-mini\")\n\n\nmodel = 'gpt-5-mini'",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#openai-sdk",
    "href": "core.html#openai-sdk",
    "title": "Cosette’s source",
    "section": "OpenAI SDK",
    "text": "OpenAI SDK\n\ncli = OpenAI().responses\n\n\nm = {'role': 'user', 'content': \"I'm Jeremy\"}\nr = cli.create(\n    input=[m], model=model, max_output_tokens=100,\n    text={ \"verbosity\": \"low\" },\n    reasoning={ \"effort\": \"minimal\" }\n)\nprint(r)\n\nResponse(id='resp_6897d45698e48195904fa8232bac129a0b2ecc78a6b61be8', created_at=1754780758.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-5-mini-2025-08-07', object='response', output=[ResponseReasoningItem(id='rs_6897d457200c8195859175bf10d88f380b2ecc78a6b61be8', summary=[], type='reasoning', content=None, encrypted_content=None, status=None), ResponseOutputMessage(id='msg_6897d4573d948195a7cb1819a879cbb90b2ecc78a6b61be8', content=[ResponseOutputText(annotations=[], text='Nice to meet you, Jeremy. How can I help today?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=100, max_tool_calls=None, previous_response_id=None, prompt=None, prompt_cache_key=None, reasoning=Reasoning(effort='minimal', generate_summary=None, summary=None), safety_identifier=None, service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatText(type='text'), verbosity='low'), top_logprobs=0, truncation='disabled', usage=In: 8; Out: 19; Total: 27, user=None, store=True)\n\n\n\nFormatting output\n\n\nExported source\n@patch\ndef _repr_markdown_(self:Response):\n    det = '\\n- '.join(f'{k}: {v}' for k,v in dict(self).items())\n    res = self.output_text\n    if not res: return f\"- {det}\"\n    return f\"\"\"{res}\n\n&lt;details&gt;\n\n- {det}\n\n&lt;/details&gt;\"\"\"\n\n\n\nr\n\nNice to meet you, Jeremy. How can I help today?\n\n\nid: resp_6897d45698e48195904fa8232bac129a0b2ecc78a6b61be8\ncreated_at: 1754780758.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d457200c8195859175bf10d88f380b2ecc78a6b61be8’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d4573d948195a7cb1819a879cbb90b2ecc78a6b61be8’, content=[ResponseOutputText(annotations=[], text=‘Nice to meet you, Jeremy. How can I help today?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 100\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=8, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=19, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=27)\nuser: None\nstore: True\n\n\n\n\n\nr.usage\n\nIn: 8; Out: 19; Total: 27\n\n\n\nsource\n\n\nusage\n\n usage (inp=0, out=0)\n\nSlightly more concise version of ResponseUsage.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninp\nint\n0\nNumber of prompt tokens\n\n\nout\nint\n0\nNumber of completion tokens\n\n\n\n\n\nExported source\ndef usage(inp=0, # Number of prompt tokens\n          out=0  # Number of completion tokens\n         ):\n    \"Slightly more concise version of `ResponseUsage`.\"\n    return ResponseUsage(input_tokens=inp, output_tokens=out, total_tokens=inp+out, input_tokens_details={'cached_tokens':0}, output_tokens_details={'cached_tokens':0, 'reasoning_tokens':0})\n\n\n\nusage(5)\n\nIn: 5; Out: 0; Total: 5\n\n\n\nsource\n\n\nResponseUsage.__repr__\n\n ResponseUsage.__repr__ ()\n\nReturn repr(self).\n\n\nExported source\n@patch\ndef __repr__(self:ResponseUsage): return f'In: {self.input_tokens}; Out: {self.output_tokens}; Total: {self.total_tokens}'\n\n\n\nr.usage\n\nIn: 8; Out: 19; Total: 27\n\n\n\nsource\n\n\nResponseUsage.__add__\n\n ResponseUsage.__add__ (b)\n\nAdd together each of input_tokens and output_tokens\n\n\nExported source\n@patch\ndef __add__(self:ResponseUsage, b):\n    \"Add together each of `input_tokens` and `output_tokens`\"\n    return usage(self.input_tokens+b.input_tokens, self.output_tokens+b.output_tokens)\n\n\n\nr.usage+r.usage\n\nIn: 16; Out: 38; Total: 54\n\n\n\nsource\n\n\nwrap_latex\n\n wrap_latex (text)\n\nReplace OpenAI LaTeX codes with markdown-compatible ones\n\n\nCreating messages\nCreating correctly formatted dicts from scratch every time isn’t very handy, so we’ll import a couple of helper functions from the msglm library.\nLet’s use mk_msg to recreate our msg {'role': 'user', 'content': \"I'm Jeremy\"} from earlier.\n\nrkw = dict(\n    text={ \"verbosity\": \"low\" },\n    reasoning={ \"effort\": \"minimal\" }\n)\n\n\nprompt = \"I'm Jeremy\"\nm = mk_msg(prompt)\nr = cli.create(input=[m], model=model, max_output_tokens=400, **rkw)\nr\n\nNice to meet you, Jeremy. How can I help you today?\n\n\nid: resp_6897d45863f0819d8a8255d9bbe192530be02598260d4824\ncreated_at: 1754780760.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d458bfb4819d9756fc650dcde8970be02598260d4824’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d458e28c819d9f16226aa7dc4f310be02598260d4824’, content=[ResponseOutputText(annotations=[], text=‘Nice to meet you, Jeremy. How can I help you today?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 400\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=8, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=20, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=28)\nuser: None\nstore: True\n\n\n\n\n\nprint(r)\n\nResponse(id='resp_6897d45863f0819d8a8255d9bbe192530be02598260d4824', created_at=1754780760.0, error=None, incomplete_details=None, instructions=None, metadata={}, model='gpt-5-mini-2025-08-07', object='response', output=[ResponseReasoningItem(id='rs_6897d458bfb4819d9756fc650dcde8970be02598260d4824', summary=[], type='reasoning', content=None, encrypted_content=None, status=None), ResponseOutputMessage(id='msg_6897d458e28c819d9f16226aa7dc4f310be02598260d4824', content=[ResponseOutputText(annotations=[], text='Nice to meet you, Jeremy. How can I help you today?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')], parallel_tool_calls=True, temperature=1.0, tool_choice='auto', tools=[], top_p=1.0, background=False, max_output_tokens=400, max_tool_calls=None, previous_response_id=None, prompt=None, prompt_cache_key=None, reasoning=Reasoning(effort='minimal', generate_summary=None, summary=None), safety_identifier=None, service_tier='default', status='completed', text=ResponseTextConfig(format=ResponseFormatText(type='text'), verbosity='low'), top_logprobs=0, truncation='disabled', usage=In: 8; Out: 20; Total: 28, user=None, store=True)\n\n\nWe can pass more than just text messages to OpenAI. As we’ll see later we can also pass images, SDK objects, etc. To handle these different data types we need to pass the type along with our content to OpenAI.\nmk_msg infers the type automatically and creates the appropriate data structure.\nLLMs, don’t actually have state, but instead dialogs are created by passing back all previous prompts and responses every time. With OpenAI, they always alternate user and assistant. We’ll use mk_msgs from msglm to make it easier to build up these dialog lists.\n\nmsgs = mk_msgs([prompt, r, \"I forgot my name. Can you remind me please?\"]) \nmsgs\n\n[{'role': 'user', 'content': \"I'm Jeremy\"},\n ResponseReasoningItem(id='rs_6897d458bfb4819d9756fc650dcde8970be02598260d4824', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseOutputMessage(id='msg_6897d458e28c819d9f16226aa7dc4f310be02598260d4824', content=[ResponseOutputText(annotations=[], text='Nice to meet you, Jeremy. How can I help you today?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message'),\n {'role': 'user', 'content': 'I forgot my name. Can you remind me please?'}]\n\n\n\ncli.create(input=msgs, model=model, max_output_tokens=400, **rkw)\n\nYou told me your name is Jeremy.\n\n\nid: resp_6897d45a1b1c819d95ce1df0d393e9a80be02598260d4824\ncreated_at: 1754780762.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d45a6144819d9270ff17363bda5a0be02598260d4824’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d45a79f8819d8cd32cf1da6b07aa0be02598260d4824’, content=[ResponseOutputText(annotations=[], text=‘You told me your name is Jeremy.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 400\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=43, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=14, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=57)\nuser: None\nstore: True",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#client",
    "href": "core.html#client",
    "title": "Cosette’s source",
    "section": "Client",
    "text": "Client\n\nBasics\n\nsource\n\n\nClient\n\n Client (model, cli=None)\n\nBasic LLM messages client.\n\n\nExported source\nclass Client:\n    def __init__(self, model, cli=None):\n        \"Basic LLM messages client.\"\n        self.model,self.use = model,usage(0,0)\n        self.text_only = model in text_only_models\n        self.c = (cli or OpenAI()).responses\n\n\n\nc = Client(model)\nc.use\n\nIn: 0; Out: 0; Total: 0\n\n\n\n\nExported source\n@patch\ndef _r(self:Client, r):\n    \"Store the result of the message and accrue total usage.\"\n    self.result = r\n    if getattr(r,'usage',None): self.use += r.usage\n    return r\n\n\n\nc._r(r)\nc.use\n\nIn: 8; Out: 20; Total: 28\n\n\n\nsource\n\n\nmk_openai_func\n\n mk_openai_func (f)\n\n\nsource\n\n\nmk_tool_choice\n\n mk_tool_choice (f)\n\n\nsource\n\n\nget_stream\n\n get_stream (o, r, cli, cb=None)\n\n\nsource\n\n\nClient.__call__\n\n Client.__call__ (msgs:list, sp:str='', maxtok=4096, stream:bool=False,\n                  tools:Optional[list]=None,\n                  tool_choice:Optional[str]=None, cb:&lt;built-\n                  infunctioncallable&gt;=None,\n                  background:Optional[bool]|NotGiven=NOT_GIVEN, include:Op\n                  tional[List[ResponseIncludable]]|NotGiven=NOT_GIVEN,\n                  input:Union[str,ResponseInputParam]|NotGiven=NOT_GIVEN,\n                  instructions:Optional[str]|NotGiven=NOT_GIVEN,\n                  max_output_tokens:Optional[int]|NotGiven=NOT_GIVEN,\n                  max_tool_calls:Optional[int]|NotGiven=NOT_GIVEN,\n                  metadata:Optional[Metadata]|NotGiven=NOT_GIVEN,\n                  model:ResponsesModel|NotGiven=NOT_GIVEN,\n                  parallel_tool_calls:Optional[bool]|NotGiven=NOT_GIVEN,\n                  previous_response_id:Optional[str]|NotGiven=NOT_GIVEN,\n                  prompt:Optional[ResponsePromptParam]|NotGiven=NOT_GIVEN,\n                  prompt_cache_key:str|NotGiven=NOT_GIVEN,\n                  reasoning:Optional[Reasoning]|NotGiven=NOT_GIVEN,\n                  safety_identifier:str|NotGiven=NOT_GIVEN, service_tier:\"\n                  Optional[Literal['auto','default','flex','scale','priori\n                  ty']]|NotGiven\"=NOT_GIVEN,\n                  store:Optional[bool]|NotGiven=NOT_GIVEN, stream_options:\n                  Optional[response_create_params.StreamOptions]|NotGiven=\n                  NOT_GIVEN,\n                  temperature:Optional[float]|NotGiven=NOT_GIVEN,\n                  text:ResponseTextConfigParam|NotGiven=NOT_GIVEN,\n                  top_logprobs:Optional[int]|NotGiven=NOT_GIVEN,\n                  top_p:Optional[float]|NotGiven=NOT_GIVEN, truncation:\"Op\n                  tional[Literal['auto','disabled']]|NotGiven\"=NOT_GIVEN,\n                  user:str|NotGiven=NOT_GIVEN,\n                  extra_headers:Headers|None=None,\n                  extra_query:Query|None=None, extra_body:Body|None=None,\n                  timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nMake a call to LLM.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nList of messages in the dialog\n\n\nsp\nstr\n\nSystem prompt\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\ntools\nOptional\nNone\nList of tools to make available\n\n\ntool_choice\nOptional\nNone\nForced tool choice\n\n\ncb\ncallable\nNone\nCallback after completion\n\n\nbackground\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\ninclude\nOptional[List[ResponseIncludable]] | NotGiven\nNOT_GIVEN\n\n\n\ninput\nUnion[str, ResponseInputParam] | NotGiven\nNOT_GIVEN\n\n\n\ninstructions\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nmax_output_tokens\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmax_tool_calls\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmetadata\nOptional[Metadata] | NotGiven\nNOT_GIVEN\n\n\n\nmodel\nResponsesModel | NotGiven\nNOT_GIVEN\n\n\n\nparallel_tool_calls\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nprevious_response_id\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nprompt\nOptional[ResponsePromptParam] | NotGiven\nNOT_GIVEN\n\n\n\nprompt_cache_key\nstr | NotGiven\nNOT_GIVEN\n\n\n\nreasoning\nOptional[Reasoning] | NotGiven\nNOT_GIVEN\n\n\n\nsafety_identifier\nstr | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nOptional[Literal[‘auto’, ‘default’, ‘flex’, ‘scale’, ‘priority’]] | NotGiven\nNOT_GIVEN\n\n\n\nstore\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nstream_options\nOptional[response_create_params.StreamOptions] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntext\nResponseTextConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_logprobs\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntruncation\nOptional[Literal[‘auto’, ‘disabled’]] | NotGiven\nNOT_GIVEN\n\n\n\nuser\nstr | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n@patch\n@delegates(Responses.create)\ndef __call__(self:Client,\n             msgs:list, # List of messages in the dialog\n             sp:str='', # System prompt\n             maxtok=4096, # Maximum tokens\n             stream:bool=False, # Stream response?\n             tools:Optional[list]=None, # List of tools to make available\n             tool_choice:Optional[str]=None, # Forced tool choice\n             cb:callable=None, # Callback after completion\n             **kwargs):\n    \"Make a call to LLM.\"\n    if tools: assert not self.text_only, \"Tool use is not supported by the current model type.\"\n    if any(c['type'] == 'image_url' for msg in msgs if isinstance(msg, dict) and isinstance(msg.get('content'), list) for c in msg['content']): assert not self.text_only, \"Images are not supported by the current model type.\"\n    tools = [mk_openai_func(o) for o in listify(tools)]\n    r = self.c.create(\n        model=self.model, input=msgs, max_output_tokens=maxtok, stream=stream, instructions=sp,\n        tools=tools, tool_choice=mk_tool_choice(tool_choice), **kwargs)\n    if stream: return get_stream(r, self, cb=cb)\n    else:\n        res = self._r(r)\n        if cb: cb(res)\n        return res\n\n\n\nmsgs = 'Hi'\n\n\nc(msgs)\n\nHi — how can I help you today?\nYou can ask me to: - Answer a question or explain something - Draft or edit text (email, resume, essay) - Write or debug code - Summarize or translate - Create plans, lists, or ideas\nTell me what you need or give a bit of context and I’ll get started.\n\n\nid: resp_6897d45b513881a28479c4c92e434b720191c55f81955c91\ncreated_at: 1754780763.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d45baa1481a2a0a0d15d1f9c7f460191c55f81955c91’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d45c9f6c81a2bd7c145c427103f60191c55f81955c91’, content=[ResponseOutputText(annotations=[], text=‘Hi — how can I help you today? can ask me to:- Answer a question or explain something- Draft or edit text (email, resume, essay)- Write or debug code- Summarize or translate- Create plans, lists, or ideasme what you need or give a bit of context and I’ll get started.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=7, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=145, output_tokens_details=OutputTokensDetails(reasoning_tokens=64), total_tokens=152)\nuser: None\nstore: True\n\n\n\n\n\nc.use\n\nIn: 15; Out: 165; Total: 180\n\n\n\nr = c(msgs, stream=True)\nfor o in r: print(o, end='')\n\nHi! How can I help you today? (Questions, writing, code, summaries, planning, troubleshooting, translations — or something else?)\n\n\n\nr.value\n\nHi! How can I help you today? (Questions, writing, code, summaries, planning, troubleshooting, translations — or something else?)\n\n\nid: resp_6897d45df2c8819f8201d25df3c807e503876a077032caec\ncreated_at: 1754780765.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d45e5034819f90493b3c80a1501903876a077032caec’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d45f0574819fa1f43885eb0d98b203876a077032caec’, content=[ResponseOutputText(annotations=[], text=‘Hi! How can I help you today? (Questions, writing, code, summaries, planning, troubleshooting, translations — or something else?)’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=7, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=98, output_tokens_details=OutputTokensDetails(reasoning_tokens=64), total_tokens=105)\nuser: None\nstore: True\n\n\n\n\n\nlen(r.events)\n\n38\n\n\n\nc.use\n\nIn: 22; Out: 263; Total: 285\n\n\n\nc(msgs, sp='Talk like GLaDOS.', **rkw)\n\nOh, hello. I see you’ve decided to say “Hi.” How delightfully predictable. What do you require from me?\n\n\nid: resp_6897d46033d88194bea98e1d57a0c0e00ca2cf68685ebb2d\ncreated_at: 1754780768.0\nerror: None\nincomplete_details: None\ninstructions: Talk like GLaDOS.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d460da888194ad6dbbf58329749c0ca2cf68685ebb2d’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d461025c8194a8e90f2b48010d1d0ca2cf68685ebb2d’, content=[ResponseOutputText(annotations=[], text=‘Oh, hello. I see you've decided to say “Hi.” How delightfully predictable. What do you require from me?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=17, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=31, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=48)\nuser: None\nstore: True\n\n\n\n\n\n\nImages\nAs everyone knows, when testing image APIs you have to use a cute puppy.\n\n# Image is Cute_dog.jpg from Wikimedia\nfn = Path('samples/puppy.jpg')\nImage(filename=fn, width=200)\n\n\n\n\n\n\n\n\n\nimg = fn.read_bytes()\n\nOpenAI expects an image message to have the following structure\n{\n  \"type\": \"image_url\",\n  \"image_url\": {\n    \"url\": f\"data:{MEDIA_TYPE};base64,{IMG}\"\n  }\n}\nmsglm automatically detects if a message is an image, encodes it, and generates the data structure above. All we need to do is a create a list containing our image and a query and then pass it to mk_msg.\nLet’s try it out…\n\nq = \"In brief, what color flowers are in this image?\"\nmsg = [mk_msg(img), mk_msg(q)]\n\n\nc = Client(model)\nc(msg, **rkw)\n\nThe flowers are light purple (lavender).\n\n\nid: resp_6897d4626da4819d92dd49c3630af97f054fee63558620b6\ncreated_at: 1754780770.0\nerror: None\nincomplete_details: None\ninstructions: None\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d462d1a0819daf9d9d0dcaa99e68054fee63558620b6’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d462eeb8819da34a86ae8fa1d333054fee63558620b6’, content=[ResponseOutputText(annotations=[], text=‘The flowers are light purple (lavender).’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=107, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=15, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=122)\nuser: None\nstore: True",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#tool-use",
    "href": "core.html#tool-use",
    "title": "Cosette’s source",
    "section": "Tool use",
    "text": "Tool use\n\nBasic tool calling\n\ndef sums(\n    a:int,  # First thing to sum\n    b:int # Second thing to sum\n) -&gt; int: # The sum of the inputs\n    \"Adds a + b.\"\n    print(f\"Finding the sum of {a} and {b}\")\n    return a + b\n\n\ndef add(x: int, y:int):\n    \"adds x and y\"\n    return x + y\n\nmk_openai_func(add)\n\n{'type': 'function',\n 'name': 'add',\n 'description': 'adds x and y',\n 'parameters': {'type': 'object',\n  'properties': {'x': {'type': 'integer', 'description': ''},\n   'y': {'type': 'integer', 'description': ''}},\n  'required': ['x', 'y']}}\n\n\n\nsysp = \"You are a helpful assistant. When using tools, be sure to pass all required parameters. Don't use tools unless needed for the provided prompt.\"\n\n\na,b = 604542,6458932\npr = f\"What is {a}+{b}?\"\ntools=sums\ntool_choice=\"sums\"\n\n\nmsgs = [mk_msg(pr)]\nr = c(msgs, sp=sysp, tools=tools, tool_choice='required', **rkw)\n\n\ntc = [o for o in r.output if isinstance(o, ResponseFunctionToolCall)]\ntc\n\n[ResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_8OjehHhvXJ2qIJhfEuo7Uqw4', name='sums', type='function_call', id='fc_6897d46448d08192ada5cc3f0ba43c360d5a5ea1c904ba0f', status='completed')]\n\n\n\nfunc = tc[0]\nfunc\n\nResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_8OjehHhvXJ2qIJhfEuo7Uqw4', name='sums', type='function_call', id='fc_6897d46448d08192ada5cc3f0ba43c360d5a5ea1c904ba0f', status='completed')\n\n\n\nsource\n\n\ncall_func_openai\n\n call_func_openai (func, ns:Optional[collections.abc.Mapping]=None)\n\n\n\nExported source\ndef call_func_openai(func, ns:Optional[abc.Mapping]=None):\n    return call_func(func.name, ast.literal_eval(func.arguments), ns, raise_on_err=False)\n\n\n\nns = mk_ns(sums)\nres = call_func_openai(func, ns=ns)\nres\n\nFinding the sum of 604542 and 6458932\n\n\n7063474\n\n\n\nsource\n\n\nmk_toolres\n\n mk_toolres (r:collections.abc.Mapping,\n             ns:Optional[collections.abc.Mapping]=None)\n\nCreate a tool_result message from response r.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nr\nMapping\n\nResponse containing tool use request\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\n\n\n\nExported source\ndef _toolres(r, ns):\n    \"Create a result dict from `tcs`.\"\n    tcs = [o for o in getattr(r, 'output', []) if isinstance(o, ResponseFunctionToolCall)]\n    if ns is None: ns = globals()\n    return { tc.call_id: call_func_openai(tc, ns=mk_ns(ns)) for tc in tcs }\n\n\n\n\nExported source\ndef mk_toolres(\n    r:abc.Mapping, # Response containing tool use request\n    ns:Optional[abc.Mapping]=None # Namespace to search for tools\n    ):\n    \"Create a `tool_result` message from response `r`.\"\n    tr = _toolres(r, ns)\n    r = mk_msg(r)\n    res = [r] if isinstance(r, dict) else listify(r)\n    for k,v in tr.items(): res.append(dict(type=\"function_call_output\", call_id=k, output=str(v)))\n    return res\n\n\n\ntr = mk_toolres(r, ns=ns)\ntr\n\nFinding the sum of 604542 and 6458932\n\n\n[ResponseReasoningItem(id='rs_6897d46408708192acd5b08ce7b560c20d5a5ea1c904ba0f', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_8OjehHhvXJ2qIJhfEuo7Uqw4', name='sums', type='function_call', id='fc_6897d46448d08192ada5cc3f0ba43c360d5a5ea1c904ba0f', status='completed'),\n {'type': 'function_call_output',\n  'call_id': 'call_8OjehHhvXJ2qIJhfEuo7Uqw4',\n  'output': '7063474'}]\n\n\n\nm2 = msgs + tr\n\n\nres = c(mk_msgs(m2), sp=sysp, tools=tools)\nres\n\n604542 + 6,458,932 = 7,063,474\n\n\nid: resp_6897d465041c819282d225ae60a38c4e0d5a5ea1c904ba0f\ncreated_at: 1754780773.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897d4656b088192a5569ed4cb14d8760d5a5ea1c904ba0f’, content=[ResponseOutputText(annotations=[], text=‘604542 + 6,458,932 = 7,063,474’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘medium’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘medium’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=157, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=20, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=177)\nuser: None\nstore: True\n\n\n\n\nThis should also work in situations where no tool use is required:\n\nmsgs = mk_toolres(\"I'm Jeremy\")\nc(msgs, sp=sysp, tools=tools, **rkw)\n\nNice to meet you, Jeremy. How can I help today?\n\n\nid: resp_6897d46622d881a3bdeac16f760cfc4e0943aa2098394400\ncreated_at: 1754780774.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d4667b4881a3842d8129cd95a7fd0943aa2098394400’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d466a44c81a3ba6292be4b603c4b0943aa2098394400’, content=[ResponseOutputText(annotations=[], text=‘Nice to meet you, Jeremy. How can I help today?’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=96, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=19, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=115)\nuser: None\nstore: True\n\n\n\n\n\nsource\n\n\nClient.structured\n\n Client.structured (msgs:list, tools:Optional[list]=None,\n                    ns:Optional[collections.abc.Mapping]=None, sp:str='',\n                    maxtok=4096, stream:bool=False,\n                    tool_choice:Optional[str]=None, cb:&lt;built-\n                    infunctioncallable&gt;=None,\n                    background:Optional[bool]|NotGiven=NOT_GIVEN, include:\n                    Optional[List[ResponseIncludable]]|NotGiven=NOT_GIVEN,\n                    input:Union[str,ResponseInputParam]|NotGiven=NOT_GIVEN\n                    , instructions:Optional[str]|NotGiven=NOT_GIVEN,\n                    max_output_tokens:Optional[int]|NotGiven=NOT_GIVEN,\n                    max_tool_calls:Optional[int]|NotGiven=NOT_GIVEN,\n                    metadata:Optional[Metadata]|NotGiven=NOT_GIVEN,\n                    model:ResponsesModel|NotGiven=NOT_GIVEN,\n                    parallel_tool_calls:Optional[bool]|NotGiven=NOT_GIVEN,\n                    previous_response_id:Optional[str]|NotGiven=NOT_GIVEN,\n                    prompt:Optional[ResponsePromptParam]|NotGiven=NOT_GIVE\n                    N, prompt_cache_key:str|NotGiven=NOT_GIVEN,\n                    reasoning:Optional[Reasoning]|NotGiven=NOT_GIVEN,\n                    safety_identifier:str|NotGiven=NOT_GIVEN, service_tier\n                    :\"Optional[Literal['auto','default','flex','scale','pr\n                    iority']]|NotGiven\"=NOT_GIVEN,\n                    store:Optional[bool]|NotGiven=NOT_GIVEN, stream_option\n                    s:Optional[response_create_params.StreamOptions]|NotGi\n                    ven=NOT_GIVEN,\n                    temperature:Optional[float]|NotGiven=NOT_GIVEN,\n                    text:ResponseTextConfigParam|NotGiven=NOT_GIVEN,\n                    top_logprobs:Optional[int]|NotGiven=NOT_GIVEN,\n                    top_p:Optional[float]|NotGiven=NOT_GIVEN, truncation:\"\n                    Optional[Literal['auto','disabled']]|NotGiven\"=NOT_GIV\n                    EN, user:str|NotGiven=NOT_GIVEN,\n                    extra_headers:Headers|None=None,\n                    extra_query:Query|None=None,\n                    extra_body:Body|None=None,\n                    timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nReturn the value of all tool calls (generally used for structured outputs)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgs\nlist\n\nPrompt\n\n\ntools\nOptional\nNone\nList of tools to make available to OpenAI model\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\nsp\nstr\n\nSystem prompt\n\n\nmaxtok\nint\n4096\nMaximum tokens\n\n\nstream\nbool\nFalse\nStream response?\n\n\ntool_choice\nOptional\nNone\nForced tool choice\n\n\ncb\ncallable\nNone\nCallback after completion\n\n\nbackground\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\ninclude\nOptional[List[ResponseIncludable]] | NotGiven\nNOT_GIVEN\n\n\n\ninput\nUnion[str, ResponseInputParam] | NotGiven\nNOT_GIVEN\n\n\n\ninstructions\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nmax_output_tokens\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmax_tool_calls\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmetadata\nOptional[Metadata] | NotGiven\nNOT_GIVEN\n\n\n\nmodel\nResponsesModel | NotGiven\nNOT_GIVEN\n\n\n\nparallel_tool_calls\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nprevious_response_id\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nprompt\nOptional[ResponsePromptParam] | NotGiven\nNOT_GIVEN\n\n\n\nprompt_cache_key\nstr | NotGiven\nNOT_GIVEN\n\n\n\nreasoning\nOptional[Reasoning] | NotGiven\nNOT_GIVEN\n\n\n\nsafety_identifier\nstr | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nOptional[Literal[‘auto’, ‘default’, ‘flex’, ‘scale’, ‘priority’]] | NotGiven\nNOT_GIVEN\n\n\n\nstore\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nstream_options\nOptional[response_create_params.StreamOptions] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntext\nResponseTextConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_logprobs\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntruncation\nOptional[Literal[‘auto’, ‘disabled’]] | NotGiven\nNOT_GIVEN\n\n\n\nuser\nstr | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n@patch\n@delegates(Client.__call__)\ndef structured(self:Client,\n               msgs: list, # Prompt\n               tools:Optional[list]=None, # List of tools to make available to OpenAI model\n               ns:Optional[abc.Mapping]=None, # Namespace to search for tools\n               **kwargs):\n    \"Return the value of all tool calls (generally used for structured outputs)\"\n    if ns is None: ns = mk_ns(tools)\n    r = self(msgs, tools=tools, tool_choice='required', **kwargs)\n    return first(_toolres(r, ns).values())\n\n\n\nclass PrimeMinister(BasicRepr):\n    \"An Australian prime minister\"\n    def __init__(\n        self,\n        firstname:str, # First name\n        surname:str, # Surname\n        dob:str, # Date of birth\n        year_entered:int, # Year first became PM\n    ): store_attr()\n\n\nc1 = Client(model)\nc1.structured('Who was the first prime minister of Australia?', [PrimeMinister], **rkw)\n\nPrimeMinister(firstname='Edmund', surname='Barton', dob='1849-01-18', year_entered=1901)\n\n\n\n\nStreaming tool calling\n\nmsgs = [mk_msg(pr)]\nr = c(msgs, sp=sysp, tools=tools, stream=True, **rkw)\n\nWe can stream back any tool call text (which may be empty):\n\nfor o in r: print(o, end='')\n\nAfter streaming is complete, value.output will contain the tool calls:\n\nr.value.output\n\n[ResponseReasoningItem(id='rs_6897d46a17848191a867916f405548c0061eb8625c4ad035', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_TQst1ZFeUsUd7sujuapuNdhU', name='sums', type='function_call', id='fc_6897d46a52e48191a6b6b77b629943d0061eb8625c4ad035', status='completed')]\n\n\nTherefore we can repeat the same process as before, but using the value attr:\n\ntr = mk_toolres(r.value, ns=ns)\nmsgs += tr\nc(mk_msgs(msgs), sp=sysp, tools=tools, **rkw)\n\nFinding the sum of 604542 and 6458932\n\n\n7,063,474\n\n\nid: resp_6897d46b096c81918f61f7ed0ef103de061eb8625c4ad035\ncreated_at: 1754780779.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897d46b804c8191bd3a793d5adbe1aa061eb8625c4ad035’, content=[ResponseOutputText(annotations=[], text=‘7,063,474’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=157, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=9, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=166)\nuser: None\nstore: True",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#chat",
    "href": "core.html#chat",
    "title": "Cosette’s source",
    "section": "Chat",
    "text": "Chat\n\nBasic chat\n\nsource\n\n\nChat\n\n Chat (model:Optional[str]=None, cli:Optional[__main__.Client]=None,\n       sp='', tools:Optional[list]=None, hist:list=None,\n       tool_choice:Optional[str]=None,\n       ns:Optional[collections.abc.Mapping]=None, **kw)\n\nOpenAI chat client.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nOptional\nNone\nModel to use (leave empty if passing cli)\n\n\ncli\nOptional\nNone\nClient to use (leave empty if passing model)\n\n\nsp\nstr\n\nOptional system prompt\n\n\ntools\nOptional\nNone\nList of tools to make available\n\n\nhist\nlist\nNone\nInitialize history\n\n\ntool_choice\nOptional\nNone\nForced tool choice\n\n\nns\nOptional\nNone\nNamespace to search for tools\n\n\nkw\nVAR_KEYWORD\n\n\n\n\n\n\n\nExported source\nclass Chat:\n    def __init__(self,\n                 model:Optional[str]=None, # Model to use (leave empty if passing `cli`)\n                 cli:Optional[Client]=None, # Client to use (leave empty if passing `model`)\n                 sp='', # Optional system prompt\n                 tools:Optional[list]=None, # List of tools to make available\n                 hist: list = None,  # Initialize history\n                 tool_choice:Optional[str]=None, # Forced tool choice\n                 ns:Optional[abc.Mapping]=None,  # Namespace to search for tools\n                 **kw):\n        \"OpenAI chat client.\"\n        assert model or cli\n        self.c = (cli or Client(model))\n        self.h = hist if hist else []\n        if ns is None: ns=tools\n        self.sp,self.tools,self.tool_choice,self.ns,self.kw = sp,tools,tool_choice,ns,kw\n    \n    @property\n    def use(self): return self.c.use\n\n\n\nchat = Chat(model, sp=sysp, **rkw)\nchat.c.use, chat.h\n\n(In: 0; Out: 0; Total: 0, [])\n\n\n\nsource\n\n\nChat.__call__\n\n Chat.__call__ (pr=None, stream:bool=False, tools=None, tool_choice=None,\n                background:Optional[bool]|NotGiven=NOT_GIVEN, include:Opti\n                onal[List[ResponseIncludable]]|NotGiven=NOT_GIVEN,\n                input:Union[str,ResponseInputParam]|NotGiven=NOT_GIVEN,\n                instructions:Optional[str]|NotGiven=NOT_GIVEN,\n                max_output_tokens:Optional[int]|NotGiven=NOT_GIVEN,\n                max_tool_calls:Optional[int]|NotGiven=NOT_GIVEN,\n                metadata:Optional[Metadata]|NotGiven=NOT_GIVEN,\n                model:ResponsesModel|NotGiven=NOT_GIVEN,\n                parallel_tool_calls:Optional[bool]|NotGiven=NOT_GIVEN,\n                previous_response_id:Optional[str]|NotGiven=NOT_GIVEN,\n                prompt:Optional[ResponsePromptParam]|NotGiven=NOT_GIVEN,\n                prompt_cache_key:str|NotGiven=NOT_GIVEN,\n                reasoning:Optional[Reasoning]|NotGiven=NOT_GIVEN,\n                safety_identifier:str|NotGiven=NOT_GIVEN, service_tier:\"Op\n                tional[Literal['auto','default','flex','scale','priority']\n                ]|NotGiven\"=NOT_GIVEN,\n                store:Optional[bool]|NotGiven=NOT_GIVEN, stream_options:Op\n                tional[response_create_params.StreamOptions]|NotGiven=NOT_\n                GIVEN, temperature:Optional[float]|NotGiven=NOT_GIVEN,\n                text:ResponseTextConfigParam|NotGiven=NOT_GIVEN,\n                top_logprobs:Optional[int]|NotGiven=NOT_GIVEN,\n                top_p:Optional[float]|NotGiven=NOT_GIVEN, truncation:\"Opti\n                onal[Literal['auto','disabled']]|NotGiven\"=NOT_GIVEN,\n                user:str|NotGiven=NOT_GIVEN,\n                extra_headers:Headers|None=None,\n                extra_query:Query|None=None, extra_body:Body|None=None,\n                timeout:float|httpx.Timeout|None|NotGiven=NOT_GIVEN)\n\nAdd prompt pr to dialog and get a response\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npr\nNoneType\nNone\nPrompt / message\n\n\nstream\nbool\nFalse\nStream response?\n\n\ntools\nNoneType\nNone\nTools to use\n\n\ntool_choice\nNoneType\nNone\nRequired tools to use\n\n\nbackground\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\ninclude\nOptional[List[ResponseIncludable]] | NotGiven\nNOT_GIVEN\n\n\n\ninput\nUnion[str, ResponseInputParam] | NotGiven\nNOT_GIVEN\n\n\n\ninstructions\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nmax_output_tokens\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmax_tool_calls\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\nmetadata\nOptional[Metadata] | NotGiven\nNOT_GIVEN\n\n\n\nmodel\nResponsesModel | NotGiven\nNOT_GIVEN\n\n\n\nparallel_tool_calls\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nprevious_response_id\nOptional[str] | NotGiven\nNOT_GIVEN\n\n\n\nprompt\nOptional[ResponsePromptParam] | NotGiven\nNOT_GIVEN\n\n\n\nprompt_cache_key\nstr | NotGiven\nNOT_GIVEN\n\n\n\nreasoning\nOptional[Reasoning] | NotGiven\nNOT_GIVEN\n\n\n\nsafety_identifier\nstr | NotGiven\nNOT_GIVEN\n\n\n\nservice_tier\nOptional[Literal[‘auto’, ‘default’, ‘flex’, ‘scale’, ‘priority’]] | NotGiven\nNOT_GIVEN\n\n\n\nstore\nOptional[bool] | NotGiven\nNOT_GIVEN\n\n\n\nstream_options\nOptional[response_create_params.StreamOptions] | NotGiven\nNOT_GIVEN\n\n\n\ntemperature\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntext\nResponseTextConfigParam | NotGiven\nNOT_GIVEN\n\n\n\ntop_logprobs\nOptional[int] | NotGiven\nNOT_GIVEN\n\n\n\ntop_p\nOptional[float] | NotGiven\nNOT_GIVEN\n\n\n\ntruncation\nOptional[Literal[‘auto’, ‘disabled’]] | NotGiven\nNOT_GIVEN\n\n\n\nuser\nstr | NotGiven\nNOT_GIVEN\n\n\n\nextra_headers\nOptional\nNone\nUse the following arguments if you need to pass additional parameters to the API that aren’t available via kwargs.The extra values given here take precedence over values defined on the client or passed to this method.\n\n\nextra_query\nQuery | None\nNone\n\n\n\nextra_body\nBody | None\nNone\n\n\n\ntimeout\nfloat | httpx.Timeout | None | NotGiven\nNOT_GIVEN\n\n\n\n\n\n\nExported source\n@patch\n@delegates(Responses.create)\ndef __call__(self:Chat,\n             pr=None,  # Prompt / message\n             stream:bool=False, # Stream response?\n             tools=None, # Tools to use\n             tool_choice=None, # Required tools to use\n             **kwargs):\n    \"Add prompt `pr` to dialog and get a response\"\n    if isinstance(pr,str): pr = pr.strip()\n    if pr: self.h.append(mk_msg(pr))\n    if not tools: tools = self.tools\n    if not tool_choice: tool_choice = self.tool_choice\n    kw = self.kw | kwargs\n    def _cb(v):\n        self.last = mk_toolres(v, ns=self.ns)\n        self.h += self.last\n    res = self.c(self.h, sp=self.sp, stream=stream, cb=_cb, tools=tools, **kw)\n    return res\n\n\n\nchat(\"I'm Jeremy\")\nchat(\"What's my name?\")\n\nYou said your name is Jeremy.\n\n\nid: resp_6897d4e3859c81a09e4c0bb8776ff226028679f12842a0be\ncreated_at: 1754780899.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d4e4152481a0a46623292dcdd0c4028679f12842a0be’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d4e45dc481a0b7c10a2e7e1abdd6028679f12842a0be’, content=[ResponseOutputText(annotations=[], text=‘You said your name is Jeremy.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=68, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=13, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=81)\nuser: None\nstore: True\n\n\n\n\n\nchat = Chat(model, sp=sysp, **rkw)\nfor o in chat(\"I'm Jeremy\", stream=True): print(o, end='')\n\nNice to meet you, Jeremy. How can I help you today?\n\n\n\nr = chat(\"What's my name?\", stream=True, **rkw)\nfor o in r: print(o, end='')\n\nYour name is Jeremy.\n\n\n\nr.value\n\nYour name is Jeremy.\n\n\nid: resp_6897d4fefaf481a0a8d73f99e538c4660d7980b96cc8aea2\ncreated_at: 1754780927.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d4ff574c81a0a391da4adbc4974f0d7980b96cc8aea2’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d4ff7a6c81a0bdf0b159c3ca5b990d7980b96cc8aea2’, content=[ResponseOutputText(annotations=[], text=‘Your name is Jeremy.’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: []\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=68, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=11, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=79)\nuser: None\nstore: True\n\n\n\n\nHistory is stored in the h attr:\n\nchat.h\n\n[{'role': 'user', 'content': \"I'm Jeremy\"},\n ResponseReasoningItem(id='rs_6897d4fce8c881a08804bababd51473f0d7980b96cc8aea2', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseOutputMessage(id='msg_6897d4fd045081a0ace336e7851c7c0a0d7980b96cc8aea2', content=[ResponseOutputText(annotations=[], text='Nice to meet you, Jeremy. How can I help you today?', type='output_text', logprobs=[])], role='assistant', status='completed', type='message'),\n {'role': 'user', 'content': \"What's my name?\"},\n ResponseReasoningItem(id='rs_6897d4ff574c81a0a391da4adbc4974f0d7980b96cc8aea2', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseOutputMessage(id='msg_6897d4ff7a6c81a0bdf0b159c3ca5b990d7980b96cc8aea2', content=[ResponseOutputText(annotations=[], text='Your name is Jeremy.', type='output_text', logprobs=[])], role='assistant', status='completed', type='message')]\n\n\n\n\nChat tool use\n\npr = f\"What is {a}+{b}?\"\npr\n\n'What is 604542+6458932?'\n\n\n\nchat = Chat(model, sp=sysp, tools=[sums], **rkw)\nr = chat(pr)\nr.output\n\nFinding the sum of 604542 and 6458932\n\n\n[ResponseReasoningItem(id='rs_6897d50827fc819396ded0a212b4007d0bef3dfa0a48e169', summary=[], type='reasoning', content=None, encrypted_content=None, status=None),\n ResponseFunctionToolCall(arguments='{\"a\":604542,\"b\":6458932}', call_id='call_5V1JqCfcUBNqIdD6YDixgWSq', name='sums', type='function_call', id='fc_6897d508600c8193ba31f085b085351c0bef3dfa0a48e169', status='completed')]\n\n\n\nchat()\n\n7063474\n\n\nid: resp_6897d50927f88193b382e22544a32ccb0bef3dfa0a48e169\ncreated_at: 1754780937.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseOutputMessage(id=‘msg_6897d509c86c8193aae59f13361a176f0bef3dfa0a48e169’, content=[ResponseOutputText(annotations=[], text=‘7063474’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=157, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=7, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=164)\nuser: None\nstore: True\n\n\n\n\n\nq = \"In brief, what color flowers are in this image?\"\nchat([img, q])\n\nPurple\n\n\nid: resp_6897d50ae24c819381991f7c960a02e10bef3dfa0a48e169\ncreated_at: 1754780938.0\nerror: None\nincomplete_details: None\ninstructions: You are a helpful assistant. When using tools, be sure to pass all required parameters. Don’t use tools unless needed for the provided prompt.\nmetadata: {}\nmodel: gpt-5-mini-2025-08-07\nobject: response\noutput: [ResponseReasoningItem(id=‘rs_6897d50b5c648193b2e1b02c0e9fc47f0bef3dfa0a48e169’, summary=[], type=‘reasoning’, content=None, encrypted_content=None, status=None), ResponseOutputMessage(id=‘msg_6897d50b76e88193b57c29e041953e410bef3dfa0a48e169’, content=[ResponseOutputText(annotations=[], text=‘Purple’, type=‘output_text’, logprobs=[])], role=‘assistant’, status=‘completed’, type=‘message’)]\nparallel_tool_calls: True\ntemperature: 1.0\ntool_choice: auto\ntools: [FunctionTool(name=‘sums’, parameters={‘type’: ‘object’, ‘properties’: {‘a’: {‘type’: ‘integer’, ‘description’: ‘First thing to sum’}, ‘b’: {‘type’: ‘integer’, ‘description’: ‘Second thing to sum’}}, ‘required’: [‘a’, ‘b’], ‘additionalProperties’: False}, strict=True, type=‘function’, description=‘Adds a + b.:- type: integer’)]\ntop_p: 1.0\nbackground: False\nmax_output_tokens: 4096\nmax_tool_calls: None\nprevious_response_id: None\nprompt: None\nprompt_cache_key: None\nreasoning: Reasoning(effort=‘minimal’, generate_summary=None, summary=None)\nsafety_identifier: None\nservice_tier: default\nstatus: completed\ntext: ResponseTextConfig(format=ResponseFormatText(type=‘text’), verbosity=‘low’)\ntop_logprobs: 0\ntruncation: disabled\nusage: ResponseUsage(input_tokens=255, input_tokens_details=InputTokensDetails(cached_tokens=0), output_tokens=7, output_tokens_details=OutputTokensDetails(reasoning_tokens=0), total_tokens=262)\nuser: None\nstore: True",
    "crumbs": [
      "Cosette's source"
    ]
  },
  {
    "objectID": "core.html#third-party-providers",
    "href": "core.html#third-party-providers",
    "title": "Cosette’s source",
    "section": "Third Party Providers",
    "text": "Third Party Providers\n\nAzure OpenAI Service\nExample Azure usage:\nazure_endpoint = AzureOpenAI(\n  azure_endpoint = os.getenv(\"AZURE_OPENAI_ENDPOINT\"), \n  api_key=os.getenv(\"AZURE_OPENAI_API_KEY\"),  \n  api_version=\"2024-08-01-preview\"\n)\n\nclient = Client(models_azure[0], azure_endpoint)\nchat = Chat(cli=client)\nchat(\"Hi.\")",
    "crumbs": [
      "Cosette's source"
    ]
  }
]